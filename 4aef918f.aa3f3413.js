(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{138:function(t,n,e){"use strict";e.r(n),e.d(n,"frontMatter",(function(){return o})),e.d(n,"metadata",(function(){return p})),e.d(n,"rightToc",(function(){return l})),e.d(n,"default",(function(){return u}));var a=e(2),r=e(6),i=(e(0),e(298)),s=e(302),c=e(303),o={title:"Palindrome Partitioning"},p={unversionedId:"dfs/palindrome-partitioning",id:"dfs/palindrome-partitioning",isDocsHomePage:!1,title:"Palindrome Partitioning",description:"\u63cf\u8ff0",source:"@site/docs/dfs/palindrome-partitioning.md",slug:"/dfs/palindrome-partitioning",permalink:"/dfs/palindrome-partitioning",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/dfs/palindrome-partitioning.md",version:"current",sidebar:"someSidebar",previous:{title:"Additive Number",permalink:"/dfs/additive-number"},next:{title:"Unique Paths",permalink:"/dfs/unique-paths"}},l=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u6df1\u641c 1",id:"\u6df1\u641c-1",children:[]},{value:"\u6df1\u641c 2",id:"\u6df1\u641c-2",children:[]},{value:"\u52a8\u89c4",id:"\u52a8\u89c4",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],b={rightToc:l};function u(t){var n=t.components,e=Object(r.a)(t,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,e,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Given a string s, partition s such that every substring of the partition is a palindrome."),Object(i.b)("p",null,"Return all possible palindrome partitioning of s."),Object(i.b)("p",null,"For example, given ",Object(i.b)("inlineCode",{parentName:"p"},'s = "aab"'),",\nReturn"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'  [\n    ["aa","b"],\n    ["a","a","b"]\n  ]\n')),Object(i.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(i.b)("p",null,"\u5728\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u5224\u65ad\u4e2d\u95f4\u7ed3\u679c\u662f\u5426\u4e3a\u5408\u6cd5\u7ed3\u679c\uff0c\u7528\u56de\u6eaf\u6cd5\u3002"),Object(i.b)("p",null,"\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5b57\u7b26\u4e32\uff0c\u6709",Object(i.b)("inlineCode",{parentName:"p"},"n-1"),"\u4e2a\u5730\u65b9\u53ef\u4ee5\u780d\u65ad\uff0c\u6bcf\u4e2a\u5730\u65b9\u53ef\u65ad\u53ef\u4e0d\u65ad\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u4e3a",Object(i.b)("span",Object(a.a)({parentName:"p"},{className:"math math-inline"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"O"),Object(i.b)("mo",Object(a.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(i.b)("msup",{parentName:"mrow"},Object(i.b)("mn",{parentName:"msup"},"2"),Object(i.b)("mrow",{parentName:"msup"},Object(i.b)("mi",{parentName:"mrow"},"n"),Object(i.b)("mo",{parentName:"mrow"},"\u2212"),Object(i.b)("mn",{parentName:"mrow"},"1"))),Object(i.b)("mo",Object(a.a)({parentName:"mrow"},{stretchy:"false"}),")")),Object(i.b)("annotation",Object(a.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"O(2^{n-1})")))),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"strut",style:{height:"1.064108em",verticalAlign:"-0.25em"}})),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.02778em"}}),"O"),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mopen"}),"("),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"2"),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"msupsub"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-t"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-r"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"vlist",style:{height:"0.8141079999999999em"}}),Object(i.b)("span",Object(a.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord mtight"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord mathnormal mtight"}),"n"),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mbin mtight"}),"\u2212"),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord mtight"}),"1"))))))))),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mclose"}),")")))))),Object(i.b)("h3",{id:"\u6df1\u641c-1"},"\u6df1\u641c 1"),Object(i.b)(s.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>> result = new ArrayList<>();\n        List<String> path = new ArrayList<>(); // \u4e00\u4e2apartition\u65b9\u6848\n        dfs(s, path, result, 0, 1);\n        return result;\n    }\n\n    // prev \u8868\u793a\u524d\u4e00\u4e2a\u9694\u677f, start \u8868\u793a\u5f53\u524d\u9694\u677f\n    private static void dfs(String s, List<String> path,\n                            List<List<String>> result, int prev, int start) {\n        if (start == s.length()) { // \u6700\u540e\u4e00\u4e2a\u9694\u677f\n            if (isPalindrome(s, prev, start - 1)) { // \u5fc5\u987b\u4f7f\u7528\n                path.add(s.substring(prev, start));\n                result.add(new ArrayList<>(path));\n                path.remove(path.size() - 1);\n            }\n            return;\n        }\n        // \u4e0d\u65ad\u5f00\n        dfs(s, path, result, prev, start + 1);\n        // \u5982\u679c[prev, start-1] \u662f\u56de\u6587\uff0c\u5219\u53ef\u4ee5\u65ad\u5f00\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u65ad\u5f00\uff08\u4e0a\u4e00\u884c\u5df2\u7ecf\u505a\u4e86\uff09\n        if (isPalindrome(s, prev, start - 1)) {\n            // \u65ad\u5f00\n            path.add(s.substring(prev, start));\n            dfs(s, path, result, start, start + 1);\n            path.remove(path.size() - 1);\n        }\n    }\n\n    private static boolean isPalindrome(String s, int start, int end) {\n        while (start < end && s.charAt(start) == s.charAt(end)) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n}\n"))),Object(i.b)(c.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        vector<vector<string>> result;\n        vector<string> path;  // \u4e00\u4e2apartition\u65b9\u6848\n        dfs(s, path, result, 0, 1);\n        return result;\n    }\n\n    // prev \u8868\u793a\u524d\u4e00\u4e2a\u9694\u677f, start \u8868\u793a\u5f53\u524d\u9694\u677f\n    void dfs(string &s, vector<string>& path,\n            vector<vector<string>> &result, size_t prev, size_t start) {\n        if (start == s.size()) { // \u6700\u540e\u4e00\u4e2a\u9694\u677f\n            if (isPalindrome(s, prev, start - 1)) { // \u5fc5\u987b\u4f7f\u7528\n                path.push_back(s.substr(prev, start - prev));\n                result.push_back(path);\n                path.pop_back();\n            }\n            return;\n        }\n        // \u4e0d\u65ad\u5f00\n        dfs(s, path, result, prev, start + 1);\n        // \u5982\u679c[prev, start-1] \u662f\u56de\u6587\uff0c\u5219\u53ef\u4ee5\u65ad\u5f00\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u65ad\u5f00\uff08\u4e0a\u4e00\u884c\u5df2\u7ecf\u505a\u4e86\uff09\n        if (isPalindrome(s, prev, start - 1)) {\n            // \u65ad\u5f00\n            path.push_back(s.substr(prev, start - prev));\n            dfs(s, path, result, start, start + 1);\n            path.pop_back();\n        }\n    }\n\n    bool isPalindrome(const string &s, int start, int end) {\n        while (start < end && s[start] == s[end]) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n};\n")))),Object(i.b)("h3",{id:"\u6df1\u641c-2"},"\u6df1\u641c 2"),Object(i.b)("p",null,"\u53e6\u4e00\u79cd\u5199\u6cd5\uff0c\u66f4\u52a0\u7b80\u6d01\u3002\u8fd9\u79cd\u5199\u6cd5\u4e5f\u5728 Combination Sum, Combination Sum II \u4e2d\u51fa\u73b0\u8fc7\u3002"),Object(i.b)(s.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>> result = new ArrayList<>();\n        List<String> path = new ArrayList<>();  // \u4e00\u4e2apartition\u65b9\u6848\n        dfs(s, path, result, 0);\n        return result;\n    }\n    // \u641c\u7d22\u5fc5\u987b\u4ee5s[start]\u5f00\u5934\u7684partition\u65b9\u6848\n    private static void dfs(String s, List<String> path,\n                            List<List<String>> result, int start) {\n        if (start == s.length()) {\n            result.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start; i < s.length(); i++) {\n            if (isPalindrome(s, start, i)) { // \u4ecei\u4f4d\u7f6e\u780d\u4e00\u5200\n                path.add(s.substring(start, i+1));\n                dfs(s, path, result, i + 1);  // \u7ee7\u7eed\u5f80\u4e0b\u780d\n                path.remove(path.size() - 1); // \u64a4\u9500\u4e0a\u4e0a\u884c\n            }\n        }\n    }\n    private static boolean isPalindrome(String s, int start, int end) {\n        while (start < end && s.charAt(start) == s.charAt(end)) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n}\n"))),Object(i.b)(c.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        vector<vector<string>> result;\n        vector<string> path;  // \u4e00\u4e2apartition\u65b9\u6848\n        DFS(s, path, result, 0);\n        return result;\n    }\n    // \u641c\u7d22\u5fc5\u987b\u4ee5s[start]\u5f00\u5934\u7684partition\u65b9\u6848\n    void DFS(string &s, vector<string>& path,\n            vector<vector<string>> &result, int start) {\n        if (start == s.size()) {\n            result.push_back(path);\n            return;\n        }\n        for (int i = start; i < s.size(); i++) {\n            if (isPalindrome(s, start, i)) { // \u4ecei\u4f4d\u7f6e\u780d\u4e00\u5200\n                path.push_back(s.substr(start, i - start + 1));\n                DFS(s, path, result, i + 1);  // \u7ee7\u7eed\u5f80\u4e0b\u780d\n                path.pop_back(); // \u64a4\u9500\u4e0a\u4e0a\u884c\n            }\n        }\n    }\n    bool isPalindrome(const string &s, int start, int end) {\n        while (start < end && s[start] == s[end]) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n};\n")))),Object(i.b)("h3",{id:"\u52a8\u89c4"},"\u52a8\u89c4"),Object(i.b)(s.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// Palindrome Partitioning\n// \u52a8\u89c4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<List<String>> partition(String s) {\n        final int n = s.length();\n        boolean[][] p = new boolean[n][n]; // whether s[i,j] is palindrome\n        for (int i = n - 1; i >= 0; --i)\n            for (int j = i; j < n; ++j)\n                p[i][j] = s.charAt(i) == s.charAt(j) &&\n                        ((j - i < 2) || p[i + 1][j - 1]);\n\n        List<List<String>>[] subPalins = new ArrayList[n]; // sub palindromes of s[0,i]\n        for (int i = 0; i < n; ++i) subPalins[i] = new ArrayList<>();\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i; j < n; ++j)\n                if (p[i][j]) {\n                    String palindrome = s.substring(i, j+1);\n                    if (j + 1 < n) {\n                        for (List<String> v : subPalins[j + 1]) {\n                            ArrayList<String> tmp = new ArrayList<>(v);\n                            tmp.add(0, palindrome);\n                            subPalins[i].add(tmp);\n                        }\n                    } else {\n                        ArrayList<String> tmp = new ArrayList<>();\n                        tmp.add(palindrome);\n                        subPalins[i].add(tmp);\n                    }\n                }\n        }\n        return subPalins[0];\n    }\n}\n"))),Object(i.b)(c.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"// Palindrome Partitioning\n// \u52a8\u89c4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<vector<string> > partition(string s) {\n        const int n = s.size();\n        bool p[n][n]; // whether s[i,j] is palindrome\n        fill_n(&p[0][0], n * n, false);\n        for (int i = n - 1; i >= 0; --i)\n            for (int j = i; j < n; ++j)\n                p[i][j] = s[i] == s[j] && ((j - i < 2) || p[i + 1][j - 1]);\n\n        vector<vector<string> > sub_palins[n]; // sub palindromes of s[0,i]\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i; j < n; ++j)\n                if (p[i][j]) {\n                    const string palindrome = s.substr(i, j - i + 1);\n                    if (j + 1 < n) {\n                        for (auto v : sub_palins[j + 1]) {\n                            v.insert(v.begin(), palindrome);\n                            sub_palins[i].push_back(v);\n                        }\n                    } else {\n                        sub_palins[i].push_back(vector<string> { palindrome });\n                    }\n                }\n        }\n        return sub_palins[0];\n    }\n};\n")))),Object(i.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/dp/palindrome-partitioning-ii"}),"Palindrome Partitioning II"))))}u.isMDXComponent=!0},298:function(t,n,e){"use strict";e.d(n,"a",(function(){return b})),e.d(n,"b",(function(){return d}));var a=e(0),r=e.n(a);function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function s(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function c(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?s(Object(e),!0).forEach((function(n){i(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):s(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function o(t,n){if(null==t)return{};var e,a,r=function(t,n){if(null==t)return{};var e,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)e=i[a],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)e=i[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var p=r.a.createContext({}),l=function(t){var n=r.a.useContext(p),e=n;return t&&(e="function"==typeof t?t(n):c(c({},n),t)),e},b=function(t){var n=l(t.components);return r.a.createElement(p.Provider,{value:n},t.children)},u={inlineCode:"code",wrapper:function(t){var n=t.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(t,n){var e=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),b=l(e),m=a,d=b["".concat(s,".").concat(m)]||b[m]||u[m]||i;return e?r.a.createElement(d,c(c({ref:n},p),{},{components:e})):r.a.createElement(d,c({ref:n},p))}));function d(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var i=e.length,s=new Array(i);s[0]=m;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=t,c.mdxType="string"==typeof t?t:a,s[1]=c;for(var p=2;p<i;p++)s[p]=e[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,e)}m.displayName="MDXCreateElement"},299:function(t,n,e){"use strict";function a(t){var n,e,r="";if("string"==typeof t||"number"==typeof t)r+=t;else if("object"==typeof t)if(Array.isArray(t))for(n=0;n<t.length;n++)t[n]&&(e=a(t[n]))&&(r&&(r+=" "),r+=e);else for(n in t)t[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var t,n,e=0,r="";e<arguments.length;)(t=arguments[e++])&&(n=a(t))&&(r&&(r+=" "),r+=n);return r}},300:function(t,n,e){"use strict";var a=e(0),r=Object(a.createContext)(void 0);n.a=r},301:function(t,n,e){"use strict";var a=e(0),r=e(300);n.a=function(){var t=Object(a.useContext)(r.a);if(null==t)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return t}},302:function(t,n,e){"use strict";var a=e(0),r=e.n(a),i=e(301),s=e(299),c=e(47),o=e.n(c),p=37,l=39;n.a=function(t){var n=t.block,e=t.children,c=t.defaultValue,b=t.values,u=t.groupId,m=Object(i.a)(),d=m.tabGroupChoices,j=m.setTabGroupChoices,O=Object(a.useState)(c),f=O[0],v=O[1],h=Object(a.useState)(!1),g=h[0],y=h[1];if(null!=u){var N=d[u];null!=N&&N!==f&&b.some((function(t){return t.value===N}))&&v(N)}var w=function(t){v(t),null!=u&&j(u,t)},P=[],S=function(t){t.metaKey||t.altKey||t.ctrlKey||y(!0)},L=function(){y(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",S),window.addEventListener("mousedown",L)}),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":n})},b.map((function(t){var n=t.value,e=t.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===n,className:Object(s.a)("tabs__item",o.a.tabItem,{"tabs__item--active":f===n}),style:g?{}:{outline:"none"},key:n,ref:function(t){return P.push(t)},onKeyDown:function(t){!function(t,n,e){switch(e.keyCode){case l:!function(t,n){var e=t.indexOf(n)+1;t[e]?t[e].focus():t[0].focus()}(t,n);break;case p:!function(t,n){var e=t.indexOf(n)-1;t[e]?t[e].focus():t[t.length-1].focus()}(t,n)}}(P,t.target,t),S(t)},onFocus:function(){return w(n)},onClick:function(){w(n),y(!1)},onPointerDown:function(){return y(!1)}},e)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(e).filter((function(t){return t.props.value===f}))[0]))}},303:function(t,n,e){"use strict";var a=e(0),r=e.n(a);n.a=function(t){return r.a.createElement("div",null,t.children)}}}]);