(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{320:function(e,r,t){"use strict";t.d(r,"a",(function(){return d})),t.d(r,"b",(function(){return f}));var n=t(0),o=t.n(n);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),u=function(e){var r=o.a.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},d=function(e){var r=u(e.components);return o.a.createElement(c.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},p=o.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),p=n,f=d["".concat(i,".").concat(p)]||d[p]||b[p]||a;return t?o.a.createElement(f,s(s({ref:r},c),{},{components:t})):o.a.createElement(f,s({ref:r},c))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},321:function(e,r,t){"use strict";function n(e){var r,t,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(r=0;r<e.length;r++)e[r]&&(t=n(e[r]))&&(o&&(o+=" "),o+=t);else for(r in e)e[r]&&(o&&(o+=" "),o+=r);return o}r.a=function(){for(var e,r,t=0,o="";t<arguments.length;)(e=arguments[t++])&&(r=n(e))&&(o&&(o+=" "),o+=r);return o}},322:function(e,r,t){"use strict";var n=t(0);const o=Object(n.createContext)(void 0);r.a=o},323:function(e,r,t){"use strict";var n=t(0),o=t(322);r.a=function(){const e=Object(n.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},324:function(e,r,t){"use strict";var n=t(0),o=t.n(n),a=t(323),i=t(321),s=t(49),l=t.n(s);const c=37,u=39;r.a=function(e){const{block:r,children:t,defaultValue:s,values:d,groupId:b}=e,{tabGroupChoices:p,setTabGroupChoices:f}=Object(a.a)(),[m,v]=Object(n.useState)(s),[y,O]=Object(n.useState)(!1);if(null!=b){const e=p[b];null!=e&&e!==m&&d.some((r=>r.value===e))&&v(e)}const g=e=>{v(e),null!=b&&f(b,e)},_=[],j=e=>{e.metaKey||e.altKey||e.ctrlKey||O(!0)},T=()=>{O(!1)};return Object(n.useEffect)((()=>{window.addEventListener("keydown",j),window.addEventListener("mousedown",T)}),[]),o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":r})},d.map((({value:e,label:r})=>o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":m===e,className:Object(i.a)("tabs__item",l.a.tabItem,{"tabs__item--active":m===e}),style:y?{}:{outline:"none"},key:e,ref:e=>_.push(e),onKeyDown:e=>{((e,r,t)=>{switch(t.keyCode){case u:((e,r)=>{const t=e.indexOf(r)+1;e[t]?e[t].focus():e[0].focus()})(e,r);break;case c:((e,r)=>{const t=e.indexOf(r)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,r)}})(_,e.target,e),j(e)},onFocus:()=>g(e),onClick:()=>{g(e),O(!1)},onPointerDown:()=>O(!1)},r)))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(t).filter((e=>e.props.value===m))[0]))}},325:function(e,r,t){"use strict";var n=t(0),o=t.n(n);r.a=function(e){return o.a.createElement("div",null,e.children)}},68:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return l})),t.d(r,"metadata",(function(){return c})),t.d(r,"rightToc",(function(){return u})),t.d(r,"default",(function(){return b}));var n=t(2),o=t(7),a=(t(0),t(320)),i=t(324),s=t(325),l={title:"Construct Binary Tree from Inorder and Postorder Traversal"},c={unversionedId:"binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal",id:"binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal",isDocsHomePage:!1,title:"Construct Binary Tree from Inorder and Postorder Traversal",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal.md",slug:"/binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal",permalink:"/binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal.md",version:"current",sidebar:"someSidebar",previous:{title:"Construct Binary Tree from Preorder and Inorder Traversal",permalink:"/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal"},next:{title:"Unique Binary Search Trees",permalink:"/binary-tree/bst/unique-binary-search-trees"}},u=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],d={rightToc:u};function b(e){var r=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},d,t,{components:r,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(a.b)("p",null,"Given inorder and postorder traversal of a tree, construct the binary tree."),Object(a.b)("p",null,"Note:\nYou may assume that duplicates do not exist in the tree."),Object(a.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(a.b)("p",null,"\u65e0"),Object(a.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(a.b)(i.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(a.b)(s.a,{value:"java",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"// Construct Binary Tree from Inorder and Postorder Traversal\n// \u9012\u5f52\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(\\logn)\npublic class Solution {\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        return buildTree(inorder, 0, inorder.length,\n                postorder, 0, postorder.length);\n    }\n\n    TreeNode buildTree(int[] inorder, int begin1, int end1,\n                       int[] postorder, int begin2, int end2) {\n        if (begin1 ==end1) return null;\n        if (begin2 ==end2) return null;\n\n        int val = postorder[end2 - 1];\n        TreeNode root = new TreeNode(val);\n\n        int in_root_pos = find(inorder, begin1, end1, val);\n        int left_size = in_root_pos - begin1;\n        int post_left_last = begin2 + left_size;\n\n        root.left = buildTree(inorder, begin1, in_root_pos,\n                postorder, begin2, post_left_last);\n        root.right = buildTree(inorder, in_root_pos + 1, end1,\n                postorder, post_left_last, end2 - 1);\n\n        return root;\n    }\n    private static int find(int[] array, int begin, int end, int val) {\n        for (int i = begin; i < end; ++i) {\n            if (array[i] == val) return i;\n        }\n        return -1;\n    }\n}\n"))),Object(a.b)(s.a,{value:"cpp",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"// Construct Binary Tree from Inorder and Postorder Traversal\n// \u9012\u5f52\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(\\logn)\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        return buildTree(begin(inorder), end(inorder),\n                begin(postorder), end(postorder));\n    }\n\n    template<typename BidiIt>\n    TreeNode* buildTree(BidiIt in_first, BidiIt in_last,\n            BidiIt post_first, BidiIt post_last) {\n        if (in_first ==in_last) return nullptr;\n        if (post_first == post_last) return nullptr;\n\n        const auto val = *prev(post_last);\n        TreeNode* root = new TreeNode(val);\n\n        auto in_root_pos = find(in_first, in_last, val);\n        auto left_size = distance(in_first, in_root_pos);\n        auto post_left_last = next(post_first, left_size);\n\n        root->left = buildTree(in_first, in_root_pos, post_first, post_left_last);\n        root->right = buildTree(next(in_root_pos), in_last, post_left_last,\n                prev(post_last));\n\n        return root;\n    }\n};\n")))),Object(a.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(n.a)({parentName:"li"},{href:"/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal"}),"Construct Binary Tree from Preorder and Inorder Traversal"))))}b.isMDXComponent=!0}}]);