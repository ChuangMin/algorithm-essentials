(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{180:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var i=n(2),r=n(6),a=(n(0),n(298)),o={title:"Combination Sum III"},c={unversionedId:"dfs/combination-sum-iii",id:"dfs/combination-sum-iii",isDocsHomePage:!1,title:"Combination Sum III",description:"\u63cf\u8ff0",source:"@site/docs/dfs/combination-sum-iii.md",slug:"/dfs/combination-sum-iii",permalink:"/algorithm-essentials/dfs/combination-sum-iii",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/dfs/combination-sum-iii.md",version:"current",sidebar:"someSidebar",previous:{title:"Combination Sum II",permalink:"/algorithm-essentials/dfs/combination-sum-ii"},next:{title:"Generate Parentheses",permalink:"/algorithm-essentials/dfs/generate-parentheses"}},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(a.b)("p",null,"Find all possible combinations of ",Object(a.b)("inlineCode",{parentName:"p"},"k")," numbers that add up to a number ",Object(a.b)("inlineCode",{parentName:"p"},"n"),", given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers."),Object(a.b)("p",null,"Ensure that numbers within the set are sorted in ascending order."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"}," Example 1"),":"),Object(a.b)("p",null,"Input: ",Object(a.b)("inlineCode",{parentName:"p"},"k"),"=3, ",Object(a.b)("inlineCode",{parentName:"p"},"n"),"=7"),Object(a.b)("p",null,"Output: ",Object(a.b)("inlineCode",{parentName:"p"},"[[1,2,4]]")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"}," Example 2"),":"),Object(a.b)("p",null,"Input: ",Object(a.b)("inlineCode",{parentName:"p"},"k"),"=3, ",Object(a.b)("inlineCode",{parentName:"p"},"n"),"=9"),Object(a.b)("p",null,"Output: ",Object(a.b)("inlineCode",{parentName:"p"},"[[1,2,6], [1,3,5], [2,3,4]]")),Object(a.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(a.b)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u591a\u9636\u6bb5\u95ee\u9898\uff0c\u76ee\u6807\u662f\u6c42\u6240\u6709\u89e3\uff0c\u663e\u7136\u7528\u6df1\u641c+\u526a\u679d\uff0c\u5373\u56de\u6eaf\u6cd5\u3002"),Object(a.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"// Combination Sum III\n// Time Complexity: O(9*8*...*(10-k)), Space Complexity: O(k)\npublic class Solution {\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        final List<List<Integer>> result = new ArrayList<>();\n        final List<Integer> path = new ArrayList<>();\n        dfs(k, n, path, result);\n        return result;\n    }\n\n    private static void dfs(int step, int gap, List<Integer> path,\n                            List<List<Integer>> result) {\n        if (step == 0) {\n            if (gap == 0) {\n                result.add(new ArrayList<>(path));\n            }\n            return;\n        }\n\n        if (gap < 1) return;\n\n        final int start = path.isEmpty() ? 1 : path.get(path.size() - 1)+1;\n        for (int i = start; i < 10; ++i) {\n            path.add(i);\n            dfs(step - 1, gap - i, path, result);\n            path.remove(path.size() - 1);\n        }\n    }\n}\n")),Object(a.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"/algorithm-essentials/dfs/combination-sum"}),"Combination Sum")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"/algorithm-essentials/dfs/combination-sum-ii"}),"Combination Sum II"))))}p.isMDXComponent=!0},298:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,d=u["".concat(o,".").concat(m)]||u[m]||b[m]||a;return n?r.a.createElement(d,c(c({ref:t},l),{},{components:n})):r.a.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);