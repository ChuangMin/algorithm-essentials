(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{327:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),c=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,c=function(e,t){if(null==e)return{};var n,a,c={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var p=c.a.createContext({}),o=function(e){var t=c.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=o(e.components);return c.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},m=c.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=o(n),m=a,d=b["".concat(r,".").concat(m)]||b[m]||u[m]||i;return n?c.a.createElement(d,s(s({ref:t},p),{},{components:n})):c.a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return c.a.createElement.apply(null,r)}return c.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},328:function(e,t,n){"use strict";function a(e){var t,n,c="";if("string"==typeof e||"number"==typeof e)c+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(c&&(c+=" "),c+=n);else for(t in e)e[t]&&(c&&(c+=" "),c+=t);return c}t.a=function(){for(var e,t,n=0,c="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(c&&(c+=" "),c+=t);return c}},329:function(e,t,n){"use strict";var a=n(0),c=n(330);t.a=function(){var e=Object(a.useContext)(c.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},330:function(e,t,n){"use strict";var a=n(0),c=Object(a.createContext)(void 0);t.a=c},331:function(e,t,n){"use strict";var a=n(0),c=n.n(a),i=n(329),r=n(328),s=n(49),l=n.n(s),p=37,o=39;t.a=function(e){var t=e.block,n=e.children,s=e.defaultValue,b=e.values,u=e.groupId,m=e.className,d=Object(i.a)(),O=d.tabGroupChoices,j=d.setTabGroupChoices,h=Object(a.useState)(s),N=h[0],f=h[1],y=Object(a.useState)(!1),v=y[0],g=y[1];if(null!=u){var k=O[u];null!=k&&k!==N&&b.some((function(e){return e.value===k}))&&f(k)}var w=function(e){f(e),null!=u&&j(u,e)},L=[],C=function(e){e.metaKey||e.altKey||e.ctrlKey||g(!0)},x=function(){g(!1)};return Object(a.useEffect)((function(){return window.addEventListener("keydown",C),window.addEventListener("mousedown",x),function(){window.removeEventListener("keydown",C),window.removeEventListener("mousedown",x)}}),[]),c.a.createElement("div",null,c.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":t},m)},b.map((function(e){var t=e.value,n=e.label;return c.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":N===t,className:Object(r.a)("tabs__item",l.a.tabItem,{"tabs__item--active":N===t}),style:v?{}:{outline:"none"},key:t,ref:function(e){return L.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case o:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case p:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(L,e.target,e),C(e)},onFocus:function(){return w(t)},onClick:function(){w(t),g(!1)},onPointerDown:function(){return g(!1)}},n)}))),c.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter((function(e){return e.props.value===N}))[0]))}},332:function(e,t,n){"use strict";var a=n(0),c=n.n(a);t.a=function(e){return c.a.createElement("div",null,e.children)}},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return u}));var a=n(2),c=n(7),i=(n(0),n(327)),r=n(331),s=n(332),l={title:"LFU Cache"},p={unversionedId:"linear-list/linked-list/lfu-cache",id:"linear-list/linked-list/lfu-cache",isDocsHomePage:!1,title:"LFU Cache",description:"\u63cf\u8ff0",source:"@site/docs/linear-list/linked-list/lfu-cache.md",slug:"/linear-list/linked-list/lfu-cache",permalink:"/linear-list/linked-list/lfu-cache",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/linear-list/linked-list/lfu-cache.md",version:"current",sidebar:"someSidebar",previous:{title:"LRU Cache",permalink:"/linear-list/linked-list/lru-cache"},next:{title:"Palindrome Linked List",permalink:"/linear-list/linked-list/palindrome-linked-list"}},o=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],b={rightToc:o};function u(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Design and implement a data structure for ",Object(i.b)("inlineCode",{parentName:"p"},"Least Frequently Used (LFU)")," cache."),Object(i.b)("p",null,"Implement the ",Object(i.b)("inlineCode",{parentName:"p"},"LFUCache")," class:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"LFUCache(int capacity)")," Initializes the object with the ",Object(i.b)("inlineCode",{parentName:"li"},"capacity")," of the data structure."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int get(int key)")," Gets the value of the ",Object(i.b)("inlineCode",{parentName:"li"},"key")," if the ",Object(i.b)("inlineCode",{parentName:"li"},"key")," exists in the cache. Otherwise, returns ",Object(i.b)("inlineCode",{parentName:"li"},"-1"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"void put(int key, int value)")," Sets or inserts the value if the ",Object(i.b)("inlineCode",{parentName:"li"},"key")," is not already present. When the cache reaches its ",Object(i.b)("inlineCode",{parentName:"li"},"capacity"),", it should invalidate the least frequently used item before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the ",Object(i.b)("strong",{parentName:"li"},"least recently")," used ",Object(i.b)("inlineCode",{parentName:"li"},"key")," would be evicted.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Notice that")," the number of times an item is used is the number of calls to the ",Object(i.b)("inlineCode",{parentName:"p"},"get")," and ",Object(i.b)("inlineCode",{parentName:"p"},"put")," functions for that item since it was inserted. This number is set to zero when the item is removed."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example 1"),":"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Input"),":",Object(i.b)("br",{parentName:"p"}),"\n",'["LFUCache", "put", "put", "get", "put", "get", "get", "put", "get", "get", "get"]',"[2]",", ","[1, 1]",", ","[2, 2]",", ","[1]",", ","[3, 3]",", ","[2]",", ","[3]",", ","[4, 4]",", ","[1]",", ","[3]",", ","[4]","]",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("strong",{parentName:"p"},"Output"),":",Object(i.b)("br",{parentName:"p"}),"\n","[null, null, null, 1, null, -1, 3, null, -1, 3, 4]"),Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Explanation"),":",Object(i.b)("br",{parentName:"p"}),"\n","LFUCache lfu = new LFUCache(2);",Object(i.b)("br",{parentName:"p"}),"\n","lfu.put(1, 1);",Object(i.b)("br",{parentName:"p"}),"\n","lfu.put(2, 2);",Object(i.b)("br",{parentName:"p"}),"\n","lfu.get(1); // return 1",Object(i.b)("br",{parentName:"p"}),"\n","lfu.put(3, 3); // evicts key 2",Object(i.b)("br",{parentName:"p"}),"\n","lfu.get(2); // return -1 (not found)",Object(i.b)("br",{parentName:"p"}),"\n","lfu.get(3); // return 3",Object(i.b)("br",{parentName:"p"}),"\n","lfu.put(4, 4); // evicts key 1.",Object(i.b)("br",{parentName:"p"}),"\n","lfu.get(1); // return -1 (not found)",Object(i.b)("br",{parentName:"p"}),"\n","lfu.get(3); // return 3",Object(i.b)("br",{parentName:"p"}),"\n","lfu.get(4); // return 4")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Constraints"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"0 <= capacity, key, value <= ",Object(i.b)("span",Object(a.a)({parentName:"li"},{className:"math math-inline"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mn",{parentName:"mrow"},"1"),Object(i.b)("msup",{parentName:"mrow"},Object(i.b)("mn",{parentName:"msup"},"0"),Object(i.b)("mn",{parentName:"msup"},"4"))),Object(i.b)("annotation",Object(a.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"10^4")))),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}})),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"1"),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"0"),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"msupsub"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-t"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-r"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"vlist",style:{height:"0.8141079999999999em"}}),Object(i.b)("span",Object(a.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord mtight"}),"4"))))))))))))),Object(i.b)("li",{parentName:"ul"},"At most ",Object(i.b)("span",Object(a.a)({parentName:"li"},{className:"math math-inline"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mn",{parentName:"mrow"},"1"),Object(i.b)("msup",{parentName:"mrow"},Object(i.b)("mn",{parentName:"msup"},"0"),Object(i.b)("mn",{parentName:"msup"},"5"))),Object(i.b)("annotation",Object(a.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"10^5")))),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}})),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"1"),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"0"),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"msupsub"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-t"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-r"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"vlist",style:{height:"0.8141079999999999em"}}),Object(i.b)("span",Object(a.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord mtight"}),"5"))))))))))))," calls will be made to get and put.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Follow up"),": Could you do both operations in ",Object(i.b)("inlineCode",{parentName:"p"},"O(1)")," time complexity?"),Object(i.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(i.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(i.b)("p",null,"\u672c\u9898\u6bd4 ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/linear-list/linked-list/lru-cache"}),"LRU Cache")," \u66f4\u590d\u6742\uff0c\u4f46\u5927\u4f53\u4e0a\u662f\u7c7b\u4f3c\u7684\u3002"),Object(i.b)(r.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// LFU Cache\n// Two HashMap + Doubly Linked List\npublic class LFUCache {\n    int capacity, size;\n    int min; // keep track of the minimum frequency\n    Map<Integer, Node> nodeMap; // key -> Node\n    Map<Integer, DList> countMap; // count -> DList\n\n    public LFUCache(int capacity) {\n        this.capacity = capacity;\n        nodeMap = new HashMap<>();\n        countMap = new HashMap<>();\n    }\n\n    // Time Complexity: O(1)\n    public int get(int key) {\n        Node node = nodeMap.get(key);\n        if (node == null) return -1;\n        update(node);\n        return node.value;\n    }\n\n    // Time Complexity: O(1)\n    public void put(int key, int value) {\n        if (capacity == 0) return;\n        Node node;\n        if (nodeMap.containsKey(key)) {\n            node = nodeMap.get(key);\n            node.value = value;\n            update(node);\n        } else {\n            node = new Node(key, value);\n            nodeMap.put(key, node);\n            if (size == capacity) {\n                DList lastList = countMap.get(min);\n                nodeMap.remove(lastList.pollLast().key);\n                size--;\n            }\n            size++;\n            min = 1; // reset min to 1\n            DList newList = countMap.getOrDefault(node.count, new DList());\n            newList.offerFirst(node);\n            countMap.put(node.count, newList);\n        }\n    }\n\n    // Increase count in countMap\n    private void update(Node node) {\n        DList oldList = countMap.get(node.count);\n        oldList.remove(node);\n        // Make min point to another list\n        if (node.count == min && oldList.size == 0) min++;\n\n        node.count++;\n        DList newList = countMap.getOrDefault(node.count, new DList());\n        newList.offerFirst(node);\n        countMap.put(node.count, newList);\n    }\n\n    // Node of doubly linked list\n    static class Node {\n        int key, value, count;\n        Node prev, next;\n        Node(int key, int value) {\n            this.key = key;\n            this.value = value;\n            count = 1;\n        }\n    }\n\n    // Doubly linked list\n    static class DList {\n        Node head, tail;\n        int size;\n\n        DList() {\n            // head and tail are two dummy nodes\n            head = new Node(0, 0);\n            tail = new Node(0, 0);\n            head.next = tail;\n            tail.prev = head;\n        }\n\n        void offerFirst(Node node) {\n            head.next.prev = node;\n            node.next = head.next;\n            node.prev = head;\n            head.next = node;\n            size++;\n        }\n\n        // Remove a node in the middle\n        void remove(Node node) {\n            if (node == null) return;\n            node.prev.next = node.next;\n            node.next.prev = node.prev;\n            size--;\n        }\n\n        // Remove the tail node\n        Node pollLast() {\n            Node last = tail.prev;\n            remove(last);\n            return last;\n        }\n    }\n}\n"))),Object(i.b)(s.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"// LRU Cache\n// \u65f6\u95f4\u590d\u6742\u5ea6O(logn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass LRUCache{\nprivate:\n    struct CacheNode {\n        int key;\n        int value;\n        CacheNode(int k, int v) :key(k), value(v){}\n    };\npublic:\n    LRUCache(int capacity) {\n        this->capacity = capacity;\n    }\n\n    int get(int key) {\n        if (cacheMap.find(key) == cacheMap.end()) return -1;\n\n        // \u628a\u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u79fb\u5230\u94fe\u8868\u5934\u90e8\uff0c\u5e76\u4e14\u66f4\u65b0map\u4e2d\u8be5\u8282\u70b9\u7684\u5730\u5740\n        cacheList.splice(cacheList.begin(), cacheList, cacheMap[key]);\n        cacheMap[key] = cacheList.begin();\n        return cacheMap[key]->value;\n    }\n\n    void set(int key, int value) {\n        if (cacheMap.find(key) == cacheMap.end()) {\n            if (cacheList.size() == capacity) { //\u5220\u9664\u94fe\u8868\u5c3e\u90e8\u8282\u70b9\uff08\u6700\u5c11\u8bbf\u95ee\u7684\u8282\u70b9\uff09\n                cacheMap.erase(cacheList.back().key);\n                cacheList.pop_back();\n            }\n            // \u63d2\u5165\u65b0\u8282\u70b9\u5230\u94fe\u8868\u5934\u90e8, \u5e76\u4e14\u5728map\u4e2d\u589e\u52a0\u8be5\u8282\u70b9\n            cacheList.push_front(CacheNode(key, value));\n            cacheMap[key] = cacheList.begin();\n        } else {\n            //\u66f4\u65b0\u8282\u70b9\u7684\u503c\uff0c\u628a\u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u79fb\u5230\u94fe\u8868\u5934\u90e8,\u5e76\u4e14\u66f4\u65b0map\u4e2d\u8be5\u8282\u70b9\u7684\u5730\u5740\n            cacheMap[key]->value = value;\n            cacheList.splice(cacheList.begin(), cacheList, cacheMap[key]);\n            cacheMap[key] = cacheList.begin();\n        }\n    }\nprivate:\n    list<CacheNode> cacheList; // doubly linked list\n    unordered_map<int, list<CacheNode>::iterator> cacheMap;\n    int capacity;\n};\n")))),Object(i.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/linear-list/linked-list/lru-cache"}),"LRU Cache"))))}u.isMDXComponent=!0}}]);