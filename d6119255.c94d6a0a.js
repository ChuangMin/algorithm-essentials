(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{279:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(7),i=(n(0),n(317)),s=n(321),o=n(322),l={title:"Serialize and Deserialize Binary Tree"},c={unversionedId:"binary-tree/recursion/serialize-and-deserialize-binary-tree",id:"binary-tree/recursion/serialize-and-deserialize-binary-tree",isDocsHomePage:!1,title:"Serialize and Deserialize Binary Tree",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/recursion/serialize-and-deserialize-binary-tree.md",slug:"/binary-tree/recursion/serialize-and-deserialize-binary-tree",permalink:"/binary-tree/recursion/serialize-and-deserialize-binary-tree",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/recursion/serialize-and-deserialize-binary-tree.md",version:"current",sidebar:"someSidebar",previous:{title:"LCA of Binary Tree",permalink:"/binary-tree/recursion/lca-of-binary-tree"},next:{title:"Range Sum Query - Mutable",permalink:"/binary-tree/segment-tree/range-sum-query-mutable"}},b=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],p={rightToc:b};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment."),Object(i.b)("p",null,"Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure."),Object(i.b)("p",null,"Clarification: The input/output format is the same as ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://leetcode.com/faq/#binary-tree"}),"how LeetCode serializes a binary tree"),". You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example 1"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"  1\n / \\\n2   3\n   / \\\n  4   5\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Input"),": root = ","[1,2,3,null,null,4,5]",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("strong",{parentName:"p"},"Output"),": ","[1,2,3,null,null,4,5]")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example 2"),":"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Input"),": root = []",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("strong",{parentName:"p"},"Output"),": []")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example 3"),":"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Input"),": root = ","[1]",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("strong",{parentName:"p"},"Output"),": ","[1]")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example 4"),":"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Input"),": root = ","[1,2]",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("strong",{parentName:"p"},"Output"),": ","[1,2]")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Constraints"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ","[0, ",Object(i.b)("span",Object(r.a)({parentName:"li"},{className:"math math-inline"}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mn",{parentName:"mrow"},"1"),Object(i.b)("msup",{parentName:"mrow"},Object(i.b)("mn",{parentName:"msup"},"0"),Object(i.b)("mn",{parentName:"msup"},"4"))),Object(i.b)("annotation",Object(r.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"10^4")))),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}})),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"mord"}),"1"),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"mord"}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"mord"}),"0"),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"msupsub"}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"vlist-t"}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"vlist-r"}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"vlist",style:{height:"0.8141079999999999em"}}),Object(i.b)("span",Object(r.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(i.b)("span",Object(r.a)({parentName:"span"},{className:"mord mtight"}),"4")))))))))))),"]","."),Object(i.b)("li",{parentName:"ul"},"-1000 <= Node.val <= 1000")),Object(i.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(i.b)("p",null,"\u8fd9\u9898\u672c\u8d28\u4e0a\u8003\u7684\u662f\u4e8c\u53c9\u6811\u7684\u904d\u5386\uff0c\u524d\u5e8f\uff0c\u4e2d\u5e8f\uff0c\u540e\u5e8f\uff0cBFS\uff0c\u65e0\u8bba\u54ea\u79cd\u90fd\u53ef\u4ee5\u3002"),Object(i.b)("p",null,'\u6ce8\u610f\uff0c\u7a7a\u53f6\u5b50\u8282\u70b9\u4e5f\u5fc5\u987b\u7f16\u7801\u4e3a"null"\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u5b58\u5b8c\u6574\u7684\u6811\u7ed3\u6784\u3002'),Object(i.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(i.b)(s.a,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"python",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'# Serialize and Deserialize Binary Tree\n# Time Complexity O(n), Space Complexity O(n)\nclass Codec:\n\n    def serialize(self, root):\n        return self.serializeDFS(root, "")\n\n    def serializeDFS(self, root, string: str):\n        if root is None:\n            string += "null,"\n        else:\n            string += str(root.val) + ","\n            string = self.serializeDFS(root.left, string)\n            string = self.serializeDFS(root.right, string)\n        return string\n\n    def deserialize(self, data):\n        return self.deserializeDFS(data.split(\',\'))\n\n    def deserializeDFS(self, l):\n        if l[0] == \'null\':\n            l.pop(0)\n            return None\n\n        root = TreeNode(l[0])\n        l.pop(0)\n        root.left = self.deserializeDFS(l)\n        root.right = self.deserializeDFS(l)\n        return root\n'))),Object(i.b)(o.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'// Serialize and Deserialize Binary Tree\n// Time Complexity O(n), Space Complexity O(n)\npublic class Codec {\n\n    public String serialize(TreeNode root) {\n        return serializeDFS(root, "");\n    }\n\n    // preorder\n    private static String serializeDFS(TreeNode root, String str) {\n        if (root == null) {\n            str += "null," ;\n        } else {\n            str += String.valueOf(root.val) + ",";\n            str = serializeDFS(root.left, str);\n            str = serializeDFS(root.right, str);\n        }\n        return str;\n    }\n\n    public TreeNode deserialize(String data) {\n        String[] arr = data.split(",");\n        LinkedList<String> l = new LinkedList<>(Arrays.asList(arr));\n        return deserializeDFS(l);\n    }\n\n    private static TreeNode deserializeDFS(LinkedList<String> l) {\n        if (l.peekFirst().equals("null")) {\n            l.pollFirst();\n            return null;\n        }\n        TreeNode root = new TreeNode(Integer.valueOf(l.pollFirst()));\n        root.left = deserializeDFS(l);\n        root.right = deserializeDFS(l);\n        return root;\n    }\n}\n'))),Object(i.b)(o.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),'// Serialize and Deserialize Binary Tree\n// Time Complexity O(n), Space Complexity O(n)\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        return serializeDFS(root, "");\n    }\n\n    // preorder\n    string serializeDFS(TreeNode* root, string str) {\n        if (root == nullptr) {\n            str += "null,";\n        } else {\n            str += std::to_string(root->val) + ",";\n            str = serializeDFS(root->left, str);\n            str = serializeDFS(root->right, str);\n        }\n        return str;\n    }\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        stringstream ss(data);\n        list<string> l;\n\n        string tmp;\n        while (getline(ss, tmp, \',\')) {\n            l.push_back(tmp);\n        }\n\n        return deserializeDFS(l);\n    }\n\n    TreeNode* deserializeDFS(list<string> &l) {\n        if (l.front() == "null") {\n            l.pop_front();\n            return nullptr;\n        }\n        TreeNode* root = new TreeNode(std::stoi(l.front()));\n        l.pop_front();\n        root->left = deserializeDFS(l);\n        root->right = deserializeDFS(l);\n        return root;\n    }\n};\n')))),Object(i.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/binary-tree/recursion/path-sum-ii"}),"Path Sum II"))))}u.isMDXComponent=!0},317:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=b(n),m=r,d=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?a.a.createElement(d,o(o({ref:t},c),{},{components:n})):a.a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},318:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},319:function(e,t,n){"use strict";var r=n(0);const a=Object(r.createContext)(void 0);t.a=a},320:function(e,t,n){"use strict";var r=n(0),a=n(319);t.a=function(){const e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},321:function(e,t,n){"use strict";var r=n(0),a=n.n(r),i=n(320),s=n(318),o=n(49),l=n.n(o);const c=37,b=39;t.a=function(e){const{block:t,children:n,defaultValue:o,values:p,groupId:u}=e,{tabGroupChoices:m,setTabGroupChoices:d}=Object(i.a)(),[O,j]=Object(r.useState)(o),[f,g]=Object(r.useState)(!1);if(null!=u){const e=m[u];null!=e&&e!==O&&p.some((t=>t.value===e))&&j(e)}const y=e=>{j(e),null!=u&&d(u,e)},N=[],h=e=>{e.metaKey||e.altKey||e.ctrlKey||g(!0)},v=()=>{g(!1)};return Object(r.useEffect)((()=>{window.addEventListener("keydown",h),window.addEventListener("mousedown",v)}),[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":t})},p.map((({value:e,label:t})=>a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===e,className:Object(s.a)("tabs__item",l.a.tabItem,{"tabs__item--active":O===e}),style:f?{}:{outline:"none"},key:e,ref:e=>N.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case b:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case c:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(N,e.target,e),h(e)},onFocus:()=>y(e),onClick:()=>{y(e),g(!1)},onPointerDown:()=>g(!1)},t)))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter((e=>e.props.value===O))[0]))}},322:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function(e){return a.a.createElement("div",null,e.children)}}}]);