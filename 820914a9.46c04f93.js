(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{199:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return o})),t.d(r,"metadata",(function(){return c})),t.d(r,"rightToc",(function(){return l})),t.d(r,"default",(function(){return p}));var n=t(2),a=t(7),i=(t(0),t(333)),o={title:"Binary Search Tree Iterator"},c={unversionedId:"binary-tree/traversal/binary-search-tree-iterator",id:"binary-tree/traversal/binary-search-tree-iterator",isDocsHomePage:!1,title:"Binary Search Tree Iterator",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/traversal/binary-search-tree-iterator.md",slug:"/binary-tree/traversal/binary-search-tree-iterator",permalink:"/binary-tree/traversal/binary-search-tree-iterator",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/traversal/binary-search-tree-iterator.md",version:"current",sidebar:"someSidebar",previous:{title:"Invert Binary Tree",permalink:"/binary-tree/traversal/invert-binary-tree"},next:{title:"Binary Tree Zigzag Level Order Traversal",permalink:"/binary-tree/traversal/binary-tree-zigzag-level-order-traversal"}},l=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]}],u={rightToc:l};function p(e){var r=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},u,t,{components:r,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST."),Object(i.b)("p",null,"Calling ",Object(i.b)("inlineCode",{parentName:"p"},"next()")," will return the next smallest number in the BST."),Object(i.b)("p",null,"Note: ",Object(i.b)("inlineCode",{parentName:"p"},"next()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"hasNext()")," should run in average ",Object(i.b)("inlineCode",{parentName:"p"},"O(1)")," time and uses ",Object(i.b)("inlineCode",{parentName:"p"},"O(h)")," memory, where h is the height of the tree."),Object(i.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(i.b)("p",null,"\u8003\u5bdf\u975e\u9012\u5f52\u7684\u4e2d\u5e8f\u904d\u5386\u3002\u8fd9\u9053\u9898\u672c\u8d28\u4e0a\u662f\u5199\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7684\u8fed\u4ee3\u5668\u3002\u5185\u90e8\u8bbe\u7f6e\u4e00\u4e2a\u6808\uff0c\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5b58\u50a8\u4ece\u6839\u8282\u70b9\u5230\u6700\u5de6\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u4f5c\u4e3a\u5f53\u524d\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u540c\u65f6\u63a2\u6d4b\u4e00\u4e0b\u5f53\u524d\u8282\u70b9\u662f\u5426\u5b58\u5728\u53f3\u5b69\u5b50\uff0c\u5982\u679c\u6709\uff0c\u5219\u8fdb\u5165\u53f3\u5b69\u5b50\uff0c\u5e76\u628a\u4ece\u8be5\u53f3\u5b69\u5b50\u5230\u6700\u5de6\u53f6\u5b50\u8282\u70b9\u7684\u6240\u6709\u8282\u70b9\u5165\u6808\u3002"),Object(i.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"// Binary Search Tree Iterator\npublic class BSTIterator {\n    public BSTIterator(TreeNode root) {\n        stack = new Stack<>();\n        while (root != null) {\n            stack.push(root);\n            root = root.left;\n        }\n    }\n\n    /** @return whether we have a next smallest number */\n    public boolean hasNext() {\n        return !stack.isEmpty();\n    }\n\n    /** @return the next smallest number */\n    public int next() {\n        final TreeNode node = stack.pop();\n        if (node.right != null) {\n            TreeNode p = node.right;\n            while (p != null) {\n                stack.push(p);\n                p = p.left;\n            }\n\n        }\n        return node.val;\n    }\n    private Stack<TreeNode> stack;\n}\n")))}p.isMDXComponent=!0},333:function(e,r,t){"use strict";t.d(r,"a",(function(){return s})),t.d(r,"b",(function(){return m}));var n=t(0),a=t.n(n);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a.a.createContext({}),p=function(e){var r=a.a.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},s=function(e){var r=p(e.components);return a.a.createElement(u.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},d=a.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(t),d=n,m=s["".concat(o,".").concat(d)]||s[d]||b[d]||i;return t?a.a.createElement(m,c(c({ref:r},u),{},{components:t})):a.a.createElement(m,c({ref:r},u))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var u=2;u<i;u++)o[u]=t[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);