(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{300:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return y}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a.a.createContext({}),p=function(e){var n=a.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=p(e.components);return a.a.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=p(t),b=r,y=m["".concat(o,".").concat(b)]||m[b]||s[b]||i;return t?a.a.createElement(y,l(l({ref:n},u),{},{components:t})):a.a.createElement(y,l({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},95:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));var r=t(2),a=t(7),i=(t(0),t(300)),o={title:"Majority Element"},l={unversionedId:"linear-list/array/majority-element",id:"linear-list/array/majority-element",isDocsHomePage:!1,title:"Majority Element",description:"\u63cf\u8ff0",source:"@site/docs/linear-list/array/majority-element.md",slug:"/linear-list/array/majority-element",permalink:"/linear-list/array/majority-element",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/linear-list/array/majority-element.md",version:"current",sidebar:"someSidebar",previous:{title:"Candy",permalink:"/linear-list/array/candy"},next:{title:"Rotate Array",permalink:"/linear-list/array/rotate-array"}},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u89e3\u6cd5 1 \u6392\u5e8f",id:"\u89e3\u6cd5-1-\u6392\u5e8f",children:[]},{value:"\u89e3\u6cd5 2 \u7ebf\u6027\u89e3\u6cd5",id:"\u89e3\u6cd5-2-\u7ebf\u6027\u89e3\u6cd5",children:[]}],u={rightToc:c};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Given an array of size n, find the majority element. The majority element is the element that appears more than ",Object(i.b)("inlineCode",{parentName:"p"},"\u230a n/2 \u230b")," times."),Object(i.b)("p",null,"You may assume that the array is non-empty and the majority element always exist in the array."),Object(i.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(i.b)("p",null,"\u8fd9\u9898\u6700\u7b80\u5355\u7684\u89e3\u6cd5\uff0c\u5148\u628a\u6570\u7ec4\u6392\u5e8f\uff0c",Object(i.b)("inlineCode",{parentName:"p"},"O(nlogn)"),"\uff0c\u7136\u540e\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u4e00\u904d\uff0c\u627e\u51fa\u6700\u957f\u7684\u8fde\u7eed\u5b50\u4e32\u3002"),Object(i.b)("p",null,"\u7531\u4e8e\u8d85\u8fc7",Object(i.b)("inlineCode",{parentName:"p"},"\u230a n/2 \u230b"),"\u6b21\uff0c\u53ef\u4ee5\u5bf9\u4e0a\u9762\u7684\u65b9\u6cd5\u6539\u8fdb\u4e00\u4e0b\uff0c\u6392\u5e8f\u540e\uff0c\u4e0d\u9700\u8981\u626b\u63cf\uff0c\u76f4\u63a5\u8fd4\u56de\u4e2d\u95f4\u90a3\u4e2a\u5143\u7d20\uff0c",Object(i.b)("inlineCode",{parentName:"p"},"nums[n/2]"),"\uff0c\u80af\u5b9a\u5c31\u662f\u7b54\u6848\u3002"),Object(i.b)("p",null,"\u4e0a\u8ff0\u4e24\u4e2a\u65b9\u6cd5\u90fd\u662f ",Object(i.b)("inlineCode",{parentName:"p"},"O(nlogn)"),"\u7684\uff0c\u672c\u9898\u6709\u4e00\u4e2a\u7ebf\u6027\u89e3\u6cd5\u3002\u7531\u4e8e\u8d85\u8fc7",Object(i.b)("inlineCode",{parentName:"p"},"\u230a n/2 \u230b"),"\uff0c\u53ef\u4ee5\u7528\u76f8\u62b5\u6d88\u7684\u601d\u60f3\uff0c\u51e1\u662f\u548c\u6700\u591a\u5143\u7d20\u4e0d\u76f8\u7b49\u7684\uff0c\u5c31\u62b5\u6d88\uff0c\u6700\u540e\u5269\u4e0b\u7684\u4e00\u5b9a\u5c31\u662f\u6700\u591a\u7684\u90a3\u4e2a\u5143\u7d20\u3002"),Object(i.b)("h3",{id:"\u89e3\u6cd5-1-\u6392\u5e8f"},"\u89e3\u6cd5 1 \u6392\u5e8f"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Majority Element\n// Time Complexity: O(nlogn), Space Complexity: O(1)\npublic class Solution {\n    public int majorityElement(int[] nums) {\n        Arrays.sort(nums);\n        return nums[nums.length/2];\n    }\n}\n")),Object(i.b)("h3",{id:"\u89e3\u6cd5-2-\u7ebf\u6027\u89e3\u6cd5"},"\u89e3\u6cd5 2 \u7ebf\u6027\u89e3\u6cd5"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Majority Element\n// Time Complexity: O(n), Space Complexity: O(1)\npublic class Solution {\n    public int majorityElement(int[] nums) {\n        int result = 0;\n        int count = 0;\n\n        for (int x : nums) {\n            if (count == 0) {\n                result = x;\n                count = 1;\n            } else if (result == x) {\n                ++count;\n            } else {\n                --count;\n            }\n        }\n        return result;\n    }\n}\n")))}p.isMDXComponent=!0}}]);