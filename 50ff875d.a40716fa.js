(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{146:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return s})),n.d(r,"metadata",(function(){return c})),n.d(r,"rightToc",(function(){return u})),n.d(r,"default",(function(){return d}));var t=n(2),a=n(7),o=(n(0),n(308)),l=n(312),i=n(313),s={title:"Binary Tree Postorder Traversal"},c={unversionedId:"binary-tree/traversal/binary-tree-postorder-traversal",id:"binary-tree/traversal/binary-tree-postorder-traversal",isDocsHomePage:!1,title:"Binary Tree Postorder Traversal",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/traversal/binary-tree-postorder-traversal.md",slug:"/binary-tree/traversal/binary-tree-postorder-traversal",permalink:"/binary-tree/traversal/binary-tree-postorder-traversal",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/traversal/binary-tree-postorder-traversal.md",version:"current",sidebar:"someSidebar",previous:{title:"Binary Tree Inorder Traversal",permalink:"/binary-tree/traversal/binary-tree-inorder-traversal"},next:{title:"Binary Tree Level Order Traversal",permalink:"/binary-tree/traversal/binary-tree-level-order-traversal"}},u=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u6808",id:"\u6808",children:[]},{value:"Morris \u540e\u5e8f\u904d\u5386",id:"morris-\u540e\u5e8f\u904d\u5386",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],p={rightToc:u};function d(e){var r=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},p,n,{components:r,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(o.b)("p",null,"Given a binary tree, return the ",Object(o.b)("strong",{parentName:"p"},"postorder")," traversal of its nodes' values."),Object(o.b)("p",null,"For example:\nGiven binary tree ",Object(o.b)("inlineCode",{parentName:"p"},"{1,#,2,3}"),","),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{})," 1\n  \\\n   2\n  /\n 3\n")),Object(o.b)("p",null,"return ",Object(o.b)("inlineCode",{parentName:"p"},"[3,2,1]"),"."),Object(o.b)("p",null,"Note: Recursive solution is trivial, could you do it iteratively?"),Object(o.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(o.b)("p",null,"\u7528\u6808\u6216\u8005 Morris \u904d\u5386\u3002"),Object(o.b)("h3",{id:"\u6808"},"\u6808"),Object(o.b)(l.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(o.b)(i.a,{value:"java",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"// Binary Tree Postorder Traversal\n// \u4f7f\u7528\u6808\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        ArrayList<Integer> result = new ArrayList<>();\n        Stack<TreeNode> s = new Stack<>();\n        /* p\uff0c\u6b63\u5728\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0cq\uff0c\u521a\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n        TreeNode p = root;\n        TreeNode q = null;\n\n        do {\n            while (p != null) { /* \u5f80\u5de6\u4e0b\u8d70*/\n                s.push(p);\n                p = p.left;\n            }\n            q = null;\n            while (!s.empty()) {\n                p = s.pop();\n                /* \u53f3\u5b69\u5b50\u4e0d\u5b58\u5728\u6216\u5df2\u88ab\u8bbf\u95ee\uff0c\u8bbf\u95ee\u4e4b*/\n                if (p.right == q) {\n                    result.add(p.val);\n                    q = p; /* \u4fdd\u5b58\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n                } else {\n                    /* \u5f53\u524d\u7ed3\u70b9\u4e0d\u80fd\u8bbf\u95ee\uff0c\u9700\u7b2c\u4e8c\u6b21\u8fdb\u6808*/\n                    s.push(p);\n                    /* \u5148\u5904\u7406\u53f3\u5b50\u6811*/\n                    p = p.right;\n                    break;\n                }\n            }\n        } while (!s.empty());\n\n        return result;\n    }\n}\n"))),Object(o.b)(i.a,{value:"cpp",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-cpp"}),"// Binary Tree Postorder Traversal\n// \u4f7f\u7528\u6808\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> result;\n        stack<const TreeNode *> s;\n        /* p\uff0c\u6b63\u5728\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0cq\uff0c\u521a\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n        const TreeNode *p = root, *q = nullptr;\n\n        do {\n            while (p != nullptr) { /* \u5f80\u5de6\u4e0b\u8d70*/\n                s.push(p);\n                p = p->left;\n            }\n            q = nullptr;\n            while (!s.empty()) {\n                p = s.top();\n                s.pop();\n                /* \u53f3\u5b69\u5b50\u4e0d\u5b58\u5728\u6216\u5df2\u88ab\u8bbf\u95ee\uff0c\u8bbf\u95ee\u4e4b*/\n                if (p->right == q) {\n                    result.push_back(p->val);\n                    q = p; /* \u4fdd\u5b58\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n                } else {\n                    /* \u5f53\u524d\u7ed3\u70b9\u4e0d\u80fd\u8bbf\u95ee\uff0c\u9700\u7b2c\u4e8c\u6b21\u8fdb\u6808*/\n                    s.push(p);\n                    /* \u5148\u5904\u7406\u53f3\u5b50\u6811*/\n                    p = p->right;\n                    break;\n                }\n            }\n        } while (!s.empty());\n\n        return result;\n    }\n};\n")))),Object(o.b)("h3",{id:"morris-\u540e\u5e8f\u904d\u5386"},"Morris \u540e\u5e8f\u904d\u5386"),Object(o.b)(l.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(o.b)(i.a,{value:"java",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"// Binary Tree Postorder Traversal\n// Morris\u540e\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        ArrayList<Integer> result = new ArrayList<>();\n        TreeNode dummy = new TreeNode(-1);\n        dummy.left = root;\n        TreeNode cur = dummy;\n        TreeNode prev = null;\n\n        while (cur != null) {\n            if (cur.left == null) {\n                prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                cur = cur.right;\n            } else {\n                TreeNode node = cur.left;\n                while (node.right != null && node.right != cur)\n                    node = node.right;\n\n                if (node.right == null) { /* \u8fd8\u6ca1\u7ebf\u7d22\u5316\uff0c\u5219\u5efa\u7acb\u7ebf\u7d22 */\n                    node.right = cur;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur.left;\n                } else { /* \u5df2\u7ecf\u7ebf\u7d22\u5316\uff0c\u5219\u8bbf\u95ee\u8282\u70b9\uff0c\u5e76\u5220\u9664\u7ebf\u7d22  */\n                    visit_reverse(cur.left, prev, result);\n                    prev.right = null;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur.right;\n                }\n            }\n        }\n        return result;\n    }\n    // \u9006\u8f6c\u8def\u5f84\n    private static void reverse(TreeNode from, TreeNode to) {\n        TreeNode x = from;\n        TreeNode y = from.right;\n        TreeNode z = null;\n        if (from == to) return;\n\n        while (x != to) {\n            z = y.right;\n            y.right = x;\n            x = y;\n            y = z;\n        }\n    }\n\n    // \u8bbf\u95ee\u9006\u8f6c\u540e\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\n    private static void visit_reverse(TreeNode from, TreeNode to,\n                                      List<Integer> result) {\n        TreeNode p = to;\n        reverse(from, to);\n\n        while (true) {\n            result.add(p.val);\n            if (p == from)\n                break;\n            p = p.right;\n        }\n\n        reverse(to, from);\n    }\n}\n"))),Object(o.b)(i.a,{value:"cpp",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-cpp"}),"// Binary Tree Postorder Traversal\n// Morris\u540e\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> result;\n        TreeNode dummy(-1);\n        TreeNode *cur, *prev = nullptr;\n        std::function < void(const TreeNode*)> visit =\n            [&result](const TreeNode *node){\n            result.push_back(node->val);\n        };\n\n        dummy.left = root;\n        cur = &dummy;\n        while (cur != nullptr) {\n            if (cur->left == nullptr) {\n                prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                cur = cur->right;\n            } else {\n                TreeNode *node = cur->left;\n                while (node->right != nullptr && node->right != cur)\n                    node = node->right;\n\n                if (node->right == nullptr) { /* \u8fd8\u6ca1\u7ebf\u7d22\u5316\uff0c\u5219\u5efa\u7acb\u7ebf\u7d22 */\n                    node->right = cur;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur->left;\n                } else { /* \u5df2\u7ecf\u7ebf\u7d22\u5316\uff0c\u5219\u8bbf\u95ee\u8282\u70b9\uff0c\u5e76\u5220\u9664\u7ebf\u7d22  */\n                    visit_reverse(cur->left, prev, visit);\n                    prev->right = nullptr;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur->right;\n                }\n            }\n        }\n        return result;\n    }\nprivate:\n    // \u9006\u8f6c\u8def\u5f84\n    static void reverse(TreeNode *from, TreeNode *to) {\n        TreeNode *x = from, *y = from->right, *z;\n        if (from == to) return;\n\n        while (x != to) {\n            z = y->right;\n            y->right = x;\n            x = y;\n            y = z;\n        }\n    }\n\n    // \u8bbf\u95ee\u9006\u8f6c\u540e\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\n    static void visit_reverse(TreeNode* from, TreeNode *to,\n                     std::function< void(const TreeNode*) >& visit) {\n        TreeNode *p = to;\n        reverse(from, to);\n\n        while (true) {\n            visit(p);\n            if (p == from)\n                break;\n            p = p->right;\n        }\n\n        reverse(to, from);\n    }\n};\n")))),Object(o.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(t.a)({parentName:"li"},{href:"/binary-tree/traversal/binary-tree-preorder-traversal"}),"Binary Tree Preorder Traversal")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(t.a)({parentName:"li"},{href:"/binary-tree/traversal/binary-tree-inorder-traversal"}),"Binary Tree Inorder Traversal")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(t.a)({parentName:"li"},{href:"/binary-tree/traversal/recover-binary-search-tree"}),"Recover Binary Search Tree"))))}d.isMDXComponent=!0},308:function(e,r,n){"use strict";n.d(r,"a",(function(){return p})),n.d(r,"b",(function(){return v}));var t=n(0),a=n.n(t);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),u=function(e){var r=a.a.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},p=function(e){var r=u(e.components);return a.a.createElement(c.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},b=a.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),b=t,v=p["".concat(l,".").concat(b)]||p[b]||d[b]||o;return n?a.a.createElement(v,i(i({ref:r},c),{},{components:n})):a.a.createElement(v,i({ref:r},c))}));function v(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var o=n.length,l=new Array(o);l[0]=b;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},309:function(e,r,n){"use strict";function t(e){var r,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(r=0;r<e.length;r++)e[r]&&(n=t(e[r]))&&(a&&(a+=" "),a+=n);else for(r in e)e[r]&&(a&&(a+=" "),a+=r);return a}r.a=function(){for(var e,r,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(r=t(e))&&(a&&(a+=" "),a+=r);return a}},310:function(e,r,n){"use strict";var t=n(0);const a=Object(t.createContext)(void 0);r.a=a},311:function(e,r,n){"use strict";var t=n(0),a=n(310);r.a=function(){const e=Object(t.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},312:function(e,r,n){"use strict";var t=n(0),a=n.n(t),o=n(311),l=n(309),i=n(49),s=n.n(i);const c=37,u=39;r.a=function(e){const{block:r,children:n,defaultValue:i,values:p,groupId:d}=e,{tabGroupChoices:b,setTabGroupChoices:v}=Object(o.a)(),[f,m]=Object(t.useState)(i),[y,h]=Object(t.useState)(!1);if(null!=d){const e=b[d];null!=e&&e!==f&&p.some((r=>r.value===e))&&m(e)}const O=e=>{m(e),null!=d&&v(d,e)},T=[],j=e=>{e.metaKey||e.altKey||e.ctrlKey||h(!0)},g=()=>{h(!1)};return Object(t.useEffect)((()=>{window.addEventListener("keydown",j),window.addEventListener("mousedown",g)}),[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":r})},p.map((({value:e,label:r})=>a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===e,className:Object(l.a)("tabs__item",s.a.tabItem,{"tabs__item--active":f===e}),style:y?{}:{outline:"none"},key:e,ref:e=>T.push(e),onKeyDown:e=>{((e,r,n)=>{switch(n.keyCode){case u:((e,r)=>{const n=e.indexOf(r)+1;e[n]?e[n].focus():e[0].focus()})(e,r);break;case c:((e,r)=>{const n=e.indexOf(r)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,r)}})(T,e.target,e),j(e)},onFocus:()=>O(e),onClick:()=>{O(e),h(!1)},onPointerDown:()=>h(!1)},r)))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},t.Children.toArray(n).filter((e=>e.props.value===f))[0]))}},313:function(e,r,n){"use strict";var t=n(0),a=n.n(t);r.a=function(e){return a.a.createElement("div",null,e.children)}}}]);