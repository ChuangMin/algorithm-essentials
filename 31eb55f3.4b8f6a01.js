(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{120:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return c})),n.d(r,"metadata",(function(){return u})),n.d(r,"rightToc",(function(){return p})),n.d(r,"default",(function(){return b}));var t=n(2),a=n(7),o=(n(0),n(333)),l=n(337),i=n(338),c={title:"Recover Binary Search Tree"},u={unversionedId:"binary-tree/traversal/recover-binary-search-tree",id:"binary-tree/traversal/recover-binary-search-tree",isDocsHomePage:!1,title:"Recover Binary Search Tree",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/traversal/recover-binary-search-tree.md",slug:"/binary-tree/traversal/recover-binary-search-tree",permalink:"/binary-tree/traversal/recover-binary-search-tree",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/traversal/recover-binary-search-tree.md",version:"current",sidebar:"someSidebar",previous:{title:"Binary Tree Zigzag Level Order Traversal",permalink:"/binary-tree/traversal/binary-tree-zigzag-level-order-traversal"},next:{title:"Same Tree",permalink:"/binary-tree/traversal/same-tree"}},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4e2d\u5e8f\u904d\u5386\uff0c\u9012\u5f52\u65b9\u5f0f",id:"\u4e2d\u5e8f\u904d\u5386\uff0c\u9012\u5f52\u65b9\u5f0f",children:[]},{value:"Morris \u4e2d\u5e8f\u904d\u5386",id:"morris-\u4e2d\u5e8f\u904d\u5386",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],s={rightToc:p};function b(e){var r=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},s,n,{components:r,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(o.b)("p",null,"Two elements of a binary search tree (BST) are swapped by mistake."),Object(o.b)("p",null,"Recover the tree without changing its structure."),Object(o.b)("p",null,"Note: A solution using ",Object(o.b)("inlineCode",{parentName:"p"},"O(n)")," space is pretty straight forward. Could you devise a constant space solution?"),Object(o.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"O(logn)"),"\u7a7a\u95f4\u7684\u89e3\u6cd5\u662f\uff0c\u4e2d\u5e8f\u9012\u5f52\u904d\u5386\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u5b58\u653e\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u78b0\u5230\u7684\u4e24\u5904\u9006\u5411\u7684\u4f4d\u7f6e\u3002"),Object(o.b)("p",null,"\u672c\u9898\u8981\u6c42",Object(o.b)("inlineCode",{parentName:"p"},"O(1)"),"\u7a7a\u95f4\uff0c\u53ea\u80fd\u7528 Morris \u4e2d\u5e8f\u904d\u5386\u3002"),Object(o.b)("h3",{id:"\u4e2d\u5e8f\u904d\u5386\uff0c\u9012\u5f52\u65b9\u5f0f"},"\u4e2d\u5e8f\u904d\u5386\uff0c\u9012\u5f52\u65b9\u5f0f"),Object(o.b)(l.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(o.b)(i.a,{value:"java",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"// Recover Binary Search Tree\n// \u4e2d\u5e8f\u904d\u5386,\u9012\u5f52\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\n// \u672c\u4ee3\u7801\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5e2e\u52a9\u7406\u89e3\u9898\u76ee\npublic class Solution {\n    private TreeNode p1 = null;\n    private TreeNode p2 = null;\n    private TreeNode prev = null;\n\n    public void recoverTree(TreeNode root) {\n        inOrder( root);\n        // swap\n        int tmp = p1.val;\n        p1.val = p2.val;\n        p2.val = tmp;\n    }\n\n    private void inOrder(TreeNode root) {\n        if ( root ==  null ) return;\n        if ( root.left != null ) inOrder(root.left);\n\n        if ( prev != null && root.val < prev.val ) {\n            if ( p1 == null) {\n                p1 = prev;\n                p2 = root;\n            } else {\n                p2 = root;\n            }\n        }\n        prev = root;\n        if ( root.right != null ) inOrder(root.right);\n    }\n}\n"))),Object(o.b)(i.a,{value:"cpp",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-cpp"}),"// Recover Binary Search Tree\n// \u4e2d\u5e8f\u904d\u5386,\u9012\u5f52\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\n// \u672c\u4ee3\u7801\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5e2e\u52a9\u7406\u89e3\u9898\u76ee\nclass Solution {\npublic:\n    void recoverTree(TreeNode *root) {\n        inOrder( root);\n        swap(p1->val, p2->val);\n    }\nprivate:\n    void inOrder(TreeNode *root) {\n        if ( root ==  nullptr ) return;\n        if ( root->left != nullptr ) inOrder(root->left);\n\n        if ( prev != nullptr && root->val < prev->val ) {\n            if ( p1 == nullptr) {\n                p1 = prev;\n                p2 = root;\n            } else {\n                p2 = root;\n            }\n        }\n        prev = root;\n        if ( root->right != nullptr ) inOrder(root->right);\n    }\n    TreeNode *p1 = nullptr;\n    TreeNode *p2 = nullptr;\n    TreeNode *prev = nullptr;\n};\n")))),Object(o.b)("h3",{id:"morris-\u4e2d\u5e8f\u904d\u5386"},"Morris \u4e2d\u5e8f\u904d\u5386"),Object(o.b)(l.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(o.b)(i.a,{value:"java",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"// Recover Binary Search Tree\n// Morris\u4e2d\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public void recoverTree(TreeNode root) {\n        TreeNode[] broken = new TreeNode[2];\n        TreeNode prev = null;\n        TreeNode cur = root;\n\n        while (cur != null) {\n            if (cur.left == null) {\n                detect(broken, prev, cur);\n                prev = cur;\n                cur = cur.right;\n            } else {\n                TreeNode node = cur.left;\n\n                while (node.right != null && node.right != cur)\n                    node = node.right;\n\n                if (node.right == null) {\n                    node.right = cur;\n                    //prev = cur; \u4e0d\u80fd\u6709\u8fd9\u53e5\uff01\u56e0\u4e3acur\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\n                    cur = cur.left;\n                } else {\n                    detect(broken, prev, cur);\n                    node.right = null;\n                    prev = cur;\n                    cur = cur.right;\n                }\n            }\n        }\n        // swap\n        int tmp = broken[0].val;\n        broken[0].val = broken[1].val;\n        broken[1].val = tmp;\n    }\n\n    void detect(TreeNode[] broken, TreeNode prev,\n                TreeNode current) {\n        if (prev != null && prev.val > current.val) {\n            if (broken[0] == null) {\n                broken[0] = prev;\n            } //\u4e0d\u80fd\u7528else\uff0c\u4f8b\u5982 {0,1}\uff0c\u4f1a\u5bfc\u81f4\u6700\u540e swap\u65f6second\u4e3anullptr\uff0c\n            //\u4f1a Runtime Error\n            broken[1] = current;\n        }\n    }\n}\n"))),Object(o.b)(i.a,{value:"cpp",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-cpp"}),"// Recover Binary Search Tree\n// Morris\u4e2d\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    void recoverTree(TreeNode* root) {\n        pair<TreeNode*, TreeNode*> broken;\n        TreeNode* prev = nullptr;\n        TreeNode* cur = root;\n\n        while (cur != nullptr) {\n            if (cur->left == nullptr) {\n                detect(broken, prev, cur);\n                prev = cur;\n                cur = cur->right;\n            } else {\n                auto node = cur->left;\n\n                while (node->right != nullptr && node->right != cur)\n                    node = node->right;\n\n                if (node->right == nullptr) {\n                    node->right = cur;\n                    //prev = cur; \u4e0d\u80fd\u6709\u8fd9\u53e5\uff01\u56e0\u4e3acur\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\n                    cur = cur->left;\n                } else {\n                    detect(broken, prev, cur);\n                    node->right = nullptr;\n                    prev = cur;\n                    cur = cur->right;\n                }\n            }\n        }\n\n        swap(broken.first->val, broken.second->val);\n    }\n\n    void detect(pair<TreeNode*, TreeNode*>& broken, TreeNode* prev,\n            TreeNode* current) {\n        if (prev != nullptr && prev->val > current->val) {\n            if (broken.first == nullptr) {\n                broken.first = prev;\n            } //\u4e0d\u80fd\u7528else\uff0c\u4f8b\u5982 {0,1}\uff0c\u4f1a\u5bfc\u81f4\u6700\u540e swap\u65f6second\u4e3anullptr\uff0c\n              //\u4f1a Runtime Error\n            broken.second = current;\n        }\n    }\n};\n")))),Object(o.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(t.a)({parentName:"li"},{href:"/binary-tree/traversal/binary-tree-inorder-traversal"}),"Binary Tree Inorder Traversal"))))}b.isMDXComponent=!0},333:function(e,r,n){"use strict";n.d(r,"a",(function(){return s})),n.d(r,"b",(function(){return v}));var t=n(0),a=n.n(t);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),p=function(e){var r=a.a.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},s=function(e){var r=p(e.components);return a.a.createElement(u.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},d=a.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=p(n),d=t,v=s["".concat(l,".").concat(d)]||s[d]||b[d]||o;return n?a.a.createElement(v,i(i({ref:r},u),{},{components:n})):a.a.createElement(v,i({ref:r},u))}));function v(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},334:function(e,r,n){"use strict";function t(e){var r,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(r=0;r<e.length;r++)e[r]&&(n=t(e[r]))&&(a&&(a+=" "),a+=n);else for(r in e)e[r]&&(a&&(a+=" "),a+=r);return a}r.a=function(){for(var e,r,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(r=t(e))&&(a&&(a+=" "),a+=r);return a}},335:function(e,r,n){"use strict";var t=n(0),a=n(336);r.a=function(){var e=Object(t.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},336:function(e,r,n){"use strict";var t=n(0),a=Object(t.createContext)(void 0);r.a=a},337:function(e,r,n){"use strict";var t=n(0),a=n.n(t),o=n(335),l=n(334),i=n(49),c=n.n(i),u=37,p=39;r.a=function(e){var r=e.block,n=e.children,i=e.defaultValue,s=e.values,b=e.groupId,d=e.className,v=Object(o.a)(),f=v.tabGroupChoices,m=v.setTabGroupChoices,O=Object(t.useState)(i),y=O[0],h=O[1],g=Object(t.useState)(!1),j=g[0],T=g[1];if(null!=b){var w=f[b];null!=w&&w!==y&&s.some((function(e){return e.value===w}))&&h(w)}var N=function(e){h(e),null!=b&&m(b,e)},k=[],E=function(e){e.metaKey||e.altKey||e.ctrlKey||T(!0)},x=function(){T(!1)};return Object(t.useEffect)((function(){return window.addEventListener("keydown",E),window.addEventListener("mousedown",x),function(){window.removeEventListener("keydown",E),window.removeEventListener("mousedown",x)}}),[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":r},d)},s.map((function(e){var r=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":y===r,className:Object(l.a)("tabs__item",c.a.tabItem,{"tabs__item--active":y===r}),style:j?{}:{outline:"none"},key:r,ref:function(e){return k.push(e)},onKeyDown:function(e){!function(e,r,n){switch(n.keyCode){case p:!function(e,r){var n=e.indexOf(r)+1;e[n]?e[n].focus():e[0].focus()}(e,r);break;case u:!function(e,r){var n=e.indexOf(r)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,r)}}(k,e.target,e),E(e)},onFocus:function(){return N(r)},onClick:function(){N(r),T(!1)},onPointerDown:function(){return T(!1)}},n)}))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},t.Children.toArray(n).filter((function(e){return e.props.value===y}))[0]))}},338:function(e,r,n){"use strict";var t=n(0),a=n.n(t);r.a=function(e){return a.a.createElement("div",null,e.children)}}}]);