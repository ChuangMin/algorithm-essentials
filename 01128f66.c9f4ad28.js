(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{337:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return f}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=o.a.createContext({}),s=function(e){var n=o.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=s(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=s(t),d=r,f=b["".concat(a,".").concat(d)]||b[d]||p[d]||i;return t?o.a.createElement(f,c(c({ref:n},u),{},{components:t})):o.a.createElement(f,c({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var u=2;u<i;u++)a[u]=t[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},338:function(e,n,t){"use strict";function r(e){var n,t,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(o&&(o+=" "),o+=t);else for(n in e)e[n]&&(o&&(o+=" "),o+=n);return o}n.a=function(){for(var e,n,t=0,o="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(o&&(o+=" "),o+=n);return o}},339:function(e,n,t){"use strict";var r=t(0),o=t(340);n.a=function(){var e=Object(r.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},340:function(e,n,t){"use strict";var r=t(0),o=Object(r.createContext)(void 0);n.a=o},341:function(e,n,t){"use strict";var r=t(0),o=t.n(r),i=t(339),a=t(338),c=t(49),l=t.n(c),u=37,s=39;n.a=function(e){var n=e.block,t=e.children,c=e.defaultValue,b=e.values,p=e.groupId,d=e.className,f=Object(i.a)(),m=f.tabGroupChoices,h=f.setTabGroupChoices,g=Object(r.useState)(c),v=g[0],O=g[1],y=Object(r.useState)(!1),j=y[0],N=y[1];if(null!=p){var x=m[p];null!=x&&x!==v&&b.some((function(e){return e.value===x}))&&O(x)}var w=function(e){O(e),null!=p&&h(p,e)},L=[],P=function(e){e.metaKey||e.altKey||e.ctrlKey||N(!0)},T=function(){N(!1)};return Object(r.useEffect)((function(){return window.addEventListener("keydown",P),window.addEventListener("mousedown",T),function(){window.removeEventListener("keydown",P),window.removeEventListener("mousedown",T)}}),[]),o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(a.a)("tabs",{"tabs--block":n},d)},b.map((function(e){var n=e.value,t=e.label;return o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":v===n,className:Object(a.a)("tabs__item",l.a.tabItem,{"tabs__item--active":v===n}),style:j?{}:{outline:"none"},key:n,ref:function(e){return L.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case s:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case u:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(L,e.target,e),P(e)},onFocus:function(){return w(n)},onClick:function(){w(n),N(!1)},onPointerDown:function(){return N(!1)}},t)}))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(t).filter((function(e){return e.props.value===v}))[0]))}},342:function(e,n,t){"use strict";var r=t(0),o=t.n(r);n.a=function(e){return o.a.createElement("div",null,e.children)}},59:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var r=t(2),o=t(7),i=(t(0),t(337)),a=t(341),c=t(342),l={title:"Populating Next Right Pointers in Each Node"},u={unversionedId:"binary-tree/recursion/populating-next-right-pointers-in-each-node",id:"binary-tree/recursion/populating-next-right-pointers-in-each-node",isDocsHomePage:!1,title:"Populating Next Right Pointers in Each Node",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/recursion/populating-next-right-pointers-in-each-node.md",slug:"/binary-tree/recursion/populating-next-right-pointers-in-each-node",permalink:"/binary-tree/recursion/populating-next-right-pointers-in-each-node",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/recursion/populating-next-right-pointers-in-each-node.md",version:"current",sidebar:"someSidebar",previous:{title:"Binary Tree Maximum Path Sum",permalink:"/binary-tree/recursion/binary-tree-maximum-path-sum"},next:{title:"Sum Root to Leaf Numbers",permalink:"/binary-tree/recursion/sum-root-to-leaf-numbers"}},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],b={rightToc:s};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Given a binary tree"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"struct TreeLinkNode {\n   int val;\n   TreeLinkNode *left, *right, *next;\n   TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n};\n")),Object(i.b)("p",null,"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ",Object(i.b)("inlineCode",{parentName:"p"},"NULL"),"."),Object(i.b)("p",null,"Initially, all next pointers are set to ",Object(i.b)("inlineCode",{parentName:"p"},"NULL"),"."),Object(i.b)("p",null,"Note:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"You may only use constant extra space."),Object(i.b)("li",{parentName:"ul"},"You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).")),Object(i.b)("p",null,"For example,"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"         1\n       /  \\\n      2    3\n     / \\  / \\\n    4  5  6  7\n")),Object(i.b)("p",null,"After calling your function, the tree should look like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"         1 -> NULL\n       /  \\\n      2 -> 3 -> NULL\n     / \\  / \\\n    4->5->6->7 -> NULL\n")),Object(i.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(i.b)("p",null,"\u65e0"),Object(i.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(i.b)(a.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Populating Next Right Pointers in Each Node\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\npublic class Solution {\n    public void connect(TreeLinkNode root) {\n        connect(root, null);\n    }\n    private static void connect(TreeLinkNode root, TreeLinkNode sibling) {\n        if (root == null) return;\n        else root.next = sibling;\n\n        connect(root.left, root.right);\n        if (sibling != null) connect(root.right, sibling.left);\n        else connect(root.right, null);\n    }\n}\n"))),Object(i.b)(c.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"// Populating Next Right Pointers in Each Node\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        connect(root, NULL);\n    }\nprivate:\n    void connect(TreeLinkNode *root, TreeLinkNode *sibling) {\n        if (root == nullptr)\n            return;\n        else\n            root->next = sibling;\n\n        connect(root->left, root->right);\n        if (sibling)\n            connect(root->right, sibling->left);\n        else\n            connect(root->right, nullptr);\n    }\n};\n")))),Object(i.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii"}),"Populating Next Right Pointers in Each Node II"))))}p.isMDXComponent=!0}}]);