(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{192:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return u})),n.d(r,"metadata",(function(){return l})),n.d(r,"rightToc",(function(){return s})),n.d(r,"default",(function(){return b}));var t=n(2),o=n(6),i=(n(0),n(298)),a=n(302),c=n(303),u={title:"Construct Binary Tree from Preorder and Inorder Traversal"},l={unversionedId:"binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal",id:"binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal",isDocsHomePage:!1,title:"Construct Binary Tree from Preorder and Inorder Traversal",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal.md",slug:"/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal",permalink:"/algorithm-essentials/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal.md",version:"current",sidebar:"someSidebar",previous:{title:"Populating Next Right Pointers in Each Node II",permalink:"/algorithm-essentials/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii"},next:{title:"Construct Binary Tree from Inorder and Postorder Traversal",permalink:"/algorithm-essentials/binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal"}},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],d={rightToc:s};function b(e){var r=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},d,n,{components:r,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Given preorder and inorder traversal of a tree, construct the binary tree."),Object(i.b)("p",null,"Note:\nYou may assume that duplicates do not exist in the tree."),Object(i.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(i.b)("p",null,"\u65e0"),Object(i.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(i.b)(a.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-java"}),"// Construct Binary Tree from Preorder and Inorder Traversal\n// \u9012\u5f52\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(\\logn)\npublic class Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return buildTree(preorder, 0, preorder.length,\n                inorder, 0, inorder.length);\n    }\n\n    TreeNode buildTree(int[] preorder, int begin1, int end1,\n                       int[] inorder, int begin2, int end2) {\n        if (begin1 == end1) return null;\n        if (begin2 == end2) return null;\n\n        TreeNode root = new TreeNode(preorder[begin1]);\n\n        int inRootPos = find(inorder, begin2, end2, preorder[begin1]);\n        int leftSize = inRootPos - begin2;\n\n        root.left = buildTree(preorder, begin1 + 1, begin1 + leftSize + 1,\n                inorder, begin2, begin2 + leftSize);\n        root.right = buildTree(preorder, begin1 + leftSize + 1, end1,\n                inorder, inRootPos + 1, end2);\n\n        return root;\n    }\n    private static int find(int[] array, int begin, int end, int val) {\n        for (int i = begin; i < end; ++i) {\n            if (array[i] == val) return i;\n        }\n        return -1;\n    }\n}\n"))),Object(i.b)(c.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-cpp"}),"// Construct Binary Tree from Preorder and Inorder Traversal\n// \u9012\u5f52\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(\\logn)\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        return buildTree(begin(preorder), end(preorder),\n                begin(inorder), end(inorder));\n    }\n\n    template<typename InputIterator>\n    TreeNode* buildTree(InputIterator pre_first, InputIterator pre_last,\n            InputIterator in_first, InputIterator in_last) {\n        if (pre_first == pre_last) return nullptr;\n        if (in_first == in_last) return nullptr;\n\n        auto root = new TreeNode(*pre_first);\n\n        auto inRootPos = find(in_first, in_last, *pre_first);\n        auto leftSize = distance(in_first, inRootPos);\n\n        root->left = buildTree(next(pre_first), next(pre_first,\n                leftSize + 1), in_first, next(in_first, leftSize));\n        root->right = buildTree(next(pre_first, leftSize + 1), pre_last,\n                next(inRootPos), in_last);\n\n        return root;\n    }\n};\n")))),Object(i.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(t.a)({parentName:"li"},{href:"/algorithm-essentials/binary-tree/construction/construct-binary-tree-from-inorder-and-postorder-traversal"}),"Construct Binary Tree from Inorder and Postorder Traversal"))))}b.isMDXComponent=!0},298:function(e,r,n){"use strict";n.d(r,"a",(function(){return d})),n.d(r,"b",(function(){return p}));var t=n(0),o=n.n(t);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function u(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),s=function(e){var r=o.a.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},d=function(e){var r=s(e.components);return o.a.createElement(l.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},f=o.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,i=e.originalType,a=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=s(n),f=t,p=d["".concat(a,".").concat(f)]||d[f]||b[f]||i;return n?o.a.createElement(p,c(c({ref:r},l),{},{components:n})):o.a.createElement(p,c({ref:r},l))}));function p(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=n.length,a=new Array(i);a[0]=f;var c={};for(var u in r)hasOwnProperty.call(r,u)&&(c[u]=r[u]);c.originalType=e,c.mdxType="string"==typeof e?e:t,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},299:function(e,r,n){"use strict";function t(e){var r,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(r=0;r<e.length;r++)e[r]&&(n=t(e[r]))&&(o&&(o+=" "),o+=n);else for(r in e)e[r]&&(o&&(o+=" "),o+=r);return o}r.a=function(){for(var e,r,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(r=t(e))&&(o&&(o+=" "),o+=r);return o}},300:function(e,r,n){"use strict";var t=n(0),o=Object(t.createContext)(void 0);r.a=o},301:function(e,r,n){"use strict";var t=n(0),o=n(300);r.a=function(){var e=Object(t.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},302:function(e,r,n){"use strict";var t=n(0),o=n.n(t),i=n(301),a=n(299),c=n(47),u=n.n(c),l=37,s=39;r.a=function(e){var r=e.block,n=e.children,c=e.defaultValue,d=e.values,b=e.groupId,f=Object(i.a)(),p=f.tabGroupChoices,m=f.setTabGroupChoices,v=Object(t.useState)(c),y=v[0],g=v[1],O=Object(t.useState)(!1),h=O[0],j=O[1];if(null!=b){var T=p[b];null!=T&&T!==y&&d.some((function(e){return e.value===T}))&&g(T)}var w=function(e){g(e),null!=b&&m(b,e)},P=[],x=function(e){e.metaKey||e.altKey||e.ctrlKey||j(!0)},I=function(){j(!1)};return Object(t.useEffect)((function(){window.addEventListener("keydown",x),window.addEventListener("mousedown",I)}),[]),o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(a.a)("tabs",{"tabs--block":r})},d.map((function(e){var r=e.value,n=e.label;return o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":y===r,className:Object(a.a)("tabs__item",u.a.tabItem,{"tabs__item--active":y===r}),style:h?{}:{outline:"none"},key:r,ref:function(e){return P.push(e)},onKeyDown:function(e){!function(e,r,n){switch(n.keyCode){case s:!function(e,r){var n=e.indexOf(r)+1;e[n]?e[n].focus():e[0].focus()}(e,r);break;case l:!function(e,r){var n=e.indexOf(r)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,r)}}(P,e.target,e),x(e)},onFocus:function(){return w(r)},onClick:function(){w(r),j(!1)},onPointerDown:function(){return j(!1)}},n)}))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},t.Children.toArray(n).filter((function(e){return e.props.value===y}))[0]))}},303:function(e,r,n){"use strict";var t=n(0),o=n.n(t);r.a=function(e){return o.a.createElement("div",null,e.children)}}}]);