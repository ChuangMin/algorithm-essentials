(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{167:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return m}));var r=n(2),a=n(7),i=(n(0),n(333)),o=n(337),u=n(338),s={title:"Permutations"},c={unversionedId:"brute-force/permutations",id:"brute-force/permutations",isDocsHomePage:!1,title:"Permutations",description:"\u63cf\u8ff0",source:"@site/docs/brute-force/permutations.md",slug:"/brute-force/permutations",permalink:"/brute-force/permutations",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/brute-force/permutations.md",version:"current",sidebar:"someSidebar",previous:{title:"Subsets II",permalink:"/brute-force/subsets-ii"},next:{title:"Permutations II",permalink:"/brute-force/permutations-ii"}},l=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"next_permutation()",id:"next_permutation",children:[]},{value:"\u9012\u5f52",id:"\u9012\u5f52",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],p={rightToc:l};function m(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Given a collection of numbers, return all possible permutations."),Object(i.b)("p",null,"For example,\n",Object(i.b)("inlineCode",{parentName:"p"},"[1,2,3]")," have the following permutations:\n",Object(i.b)("inlineCode",{parentName:"p"},"[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2]"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"[3,2,1]"),"."),Object(i.b)("h3",{id:"next_permutation"},"next_permutation()"),Object(i.b)("p",null,"\u51fd\u6570 ",Object(i.b)("inlineCode",{parentName:"p"},"next_permutation()"),"\u7684\u5177\u4f53\u5b9e\u73b0\u89c1\u8fd9\u8282 ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/linear-list/array/next-permutation"}),"Next Permutation"),"\u3002"),Object(i.b)(o.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(u.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Permutations\n// \u91cd\u65b0\u5b9e\u73b0 next_permutation()\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        Arrays.sort(nums);\n\n        do {\n            ArrayList<Integer> one = new ArrayList<>();\n            for (int i : nums) {\n                one.add(i);\n            }\n            result.add(one);\n            // \u8c03\u7528\u7684\u662f 2.1.12 \u8282\u7684 next_permutation()\n            // \u800c\u4e0d\u662f std::next_permutation()\n        } while(nextPermutation(nums, 0, nums.length));\n        return result;\n    }\n    // \u4ee3\u7801\u6765\u81ea 2.1.12 \u8282\u7684 next_permutation()\n    private static boolean nextPermutation(int[] nums, int begin, int end) {\n        // From right to left, find the first digit(partitionNumber)\n        // which violates the increase trend\n        int p = end - 2;\n        while (p > -1 && nums[p] >= nums[p + 1]) --p;\n\n        // If not found, which means current sequence is already the largest\n        // permutation, then rearrange to the first permutation and return false\n        if(p == -1) {\n            reverse(nums, begin, end);\n            return false;\n        }\n\n        // From right to left, find the first digit which is greater\n        // than the partition number, call it changeNumber\n        int c = end - 1;\n        while (c > 0 && nums[c] <= nums[p]) --c;\n\n        // Swap the partitionNumber and changeNumber\n        swap(nums, p, c);\n        // Reverse all the digits on the right of partitionNumber\n        reverse(nums, p+1, end);\n        return true;\n    }\n    private static void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }\n    private static void reverse(int[] nums, int begin, int end) {\n        end--;\n        while (begin < end) {\n            swap(nums, begin++, end--);\n        }\n    }\n}\n"))),Object(i.b)(u.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"// Permutations\n// \u91cd\u65b0\u5b9e\u73b0 next_permutation()\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<vector<int> > permute(vector<int> &num) {\n        vector<vector<int> > result;\n        sort(num.begin(), num.end());\n\n        do {\n            result.push_back(num);\n        // \u8c03\u7528\u7684\u662f 2.1.12 \u8282\u7684 next_permutation()\n        // \u800c\u4e0d\u662f std::next_permutation()\n        } while(next_permutation(num.begin(), num.end()));\n        return result;\n    }\nprivate:\n    // \u4ee3\u7801\u6765\u81ea 2.1.12 \u8282\u7684 next_permutation()\n    void nextPermutation(vector<int> &nums) {\n        next_permutation(nums.begin(), nums.end());\n    }\n\n    template<typename BidiIt>\n    bool next_permutation(BidiIt first, BidiIt last) {\n        // Get a reversed range to simplify reversed traversal.\n        const auto rfirst = reverse_iterator<BidiIt>(last);\n        const auto rlast = reverse_iterator<BidiIt>(first);\n\n        // Begin from the second last element to the first element.\n        auto pivot = next(rfirst);\n\n        // Find `pivot`, which is the first element that is no less than its\n        // successor.  `Prev` is used since `pivort` is a `reversed_iterator`.\n        while (pivot != rlast && *pivot >= *prev(pivot))\n            ++pivot;\n\n        // No such elemenet found, current sequence is already the largest\n        // permutation, then rearrange to the first permutation and return false.\n        if (pivot == rlast) {\n            reverse(rfirst, rlast);\n            return false;\n        }\n\n        // Scan from right to left, find the first element that is greater than\n        // `pivot`.\n        auto change = find_if(rfirst, pivot, bind1st(less<int>(), *pivot));\n\n        swap(*change, *pivot);\n        reverse(rfirst, pivot);\n\n        return true;\n    }\n};\n")))),Object(i.b)("h3",{id:"\u9012\u5f52"},"\u9012\u5f52"),Object(i.b)("p",null,"\u672c\u9898\u662f\u6c42\u8def\u5f84\u672c\u8eab\uff0c\u6c42\u6240\u6709\u89e3\uff0c\u51fd\u6570\u53c2\u6570\u9700\u8981\u6807\u8bb0\u5f53\u524d\u8d70\u5230\u4e86\u54ea\u6b65\uff0c\u8fd8\u9700\u8981\u4e2d\u95f4\u7ed3\u679c\u7684\u5f15\u7528\uff0c\u6700\u7ec8\u7ed3\u679c\u7684\u5f15\u7528\u3002"),Object(i.b)("p",null,"\u6269\u5c55\u8282\u70b9\uff0c\u6bcf\u6b21\u4ece\u5de6\u5230\u53f3\uff0c\u9009\u4e00\u4e2a\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u5143\u7d20\u3002"),Object(i.b)("p",null,"\u672c\u9898\u4e0d\u9700\u8981\u5224\u91cd\uff0c\u56e0\u4e3a\u72b6\u6001\u88c5\u6362\u56fe\u662f\u4e00\u9897\u6709\u5c42\u6b21\u7684\u6811\u3002\u6536\u655b\u6761\u4ef6\u662f\u5f53\u524d\u8d70\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002"),Object(i.b)("h4",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(i.b)(o.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(u.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Permutations\n// \u6df1\u641c\uff0c\u589e\u91cf\u6784\u9020\u6cd5\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        Arrays.sort(nums);\n\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> path = new ArrayList<>(); // \u4e2d\u95f4\u7ed3\u679c\n\n        dfs(nums, path, result);\n        return result;\n    }\n    private static void dfs(int[] nums, List<Integer> path,\n                            List<List<Integer>> result) {\n        if (path.size() == nums.length) {  // \u6536\u655b\u6761\u4ef6\n            result.add(new ArrayList<Integer>(path));\n            return;\n        }\n\n        // \u6269\u5c55\u72b6\u6001\n        for (int i : nums) {\n            // \u67e5\u627e i \u662f\u5426\u5728path \u4e2d\u51fa\u73b0\u8fc7\n            int pos = path.indexOf(i);\n\n            if (pos == -1) {\n                path.add(i);\n                dfs(nums, path, result);\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n}\n"))),Object(i.b)(u.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"// Permutations\n// \u6df1\u641c\uff0c\u589e\u91cf\u6784\u9020\u6cd5\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > permute(vector<int>& num) {\n        sort(num.begin(), num.end());\n\n        vector<vector<int>> result;\n        vector<int> path;  // \u4e2d\u95f4\u7ed3\u679c\n\n        dfs(num, path, result);\n        return result;\n    }\nprivate:\n    void dfs(const vector<int>& num, vector<int> &path,\n            vector<vector<int> > &result) {\n        if (path.size() == num.size()) {  // \u6536\u655b\u6761\u4ef6\n            result.push_back(path);\n            return;\n        }\n\n        // \u6269\u5c55\u72b6\u6001\n        for (auto i : num) {\n            // \u67e5\u627e i \u662f\u5426\u5728path \u4e2d\u51fa\u73b0\u8fc7\n            auto pos = find(path.begin(), path.end(), i);\n\n            if (pos == path.end()) {\n                path.push_back(i);\n                dfs(num, path, result);\n                path.pop_back();\n            }\n        }\n    }\n};\n")))),Object(i.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/linear-list/array/next-permutation"}),"Next Permutation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/linear-list/array/permutation-sequence"}),"Permutation Sequence")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/brute-force/permutations-ii"}),"Permutations II")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/brute-force/combinations"}),"Combinations"))))}m.isMDXComponent=!0},333:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),l=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},p=function(e){var t=l(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),b=r,f=p["".concat(o,".").concat(b)]||p[b]||m[b]||i;return n?a.a.createElement(f,u(u({ref:t},c),{},{components:n})):a.a.createElement(f,u({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var c=2;c<i;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},334:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},335:function(e,t,n){"use strict";var r=n(0),a=n(336);t.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},336:function(e,t,n){"use strict";var r=n(0),a=Object(r.createContext)(void 0);t.a=a},337:function(e,t,n){"use strict";var r=n(0),a=n.n(r),i=n(335),o=n(334),u=n(49),s=n.n(u),c=37,l=39;t.a=function(e){var t=e.block,n=e.children,u=e.defaultValue,p=e.values,m=e.groupId,b=e.className,f=Object(i.a)(),d=f.tabGroupChoices,v=f.setTabGroupChoices,h=Object(r.useState)(u),O=h[0],j=h[1],g=Object(r.useState)(!1),y=g[0],w=g[1];if(null!=m){var x=d[m];null!=x&&x!==O&&p.some((function(e){return e.value===x}))&&j(x)}var N=function(e){j(e),null!=m&&v(m,e)},P=[],I=function(e){e.metaKey||e.altKey||e.ctrlKey||w(!0)},_=function(){w(!1)};return Object(r.useEffect)((function(){return window.addEventListener("keydown",I),window.addEventListener("mousedown",_),function(){window.removeEventListener("keydown",I),window.removeEventListener("mousedown",_)}}),[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t},b)},p.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===t,className:Object(o.a)("tabs__item",s.a.tabItem,{"tabs__item--active":O===t}),style:y?{}:{outline:"none"},key:t,ref:function(e){return P.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case l:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case c:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(P,e.target,e),I(e)},onFocus:function(){return N(t)},onClick:function(){N(t),w(!1)},onPointerDown:function(){return w(!1)}},n)}))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter((function(e){return e.props.value===O}))[0]))}},338:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function(e){return a.a.createElement("div",null,e.children)}}}]);