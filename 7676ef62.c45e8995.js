(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{182:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var r=t(2),i=t(7),a=(t(0),t(315)),o={title:"Range Sum Query - Mutable"},u={unversionedId:"binary-tree/segment-tree/range-sum-query-mutable",id:"binary-tree/segment-tree/range-sum-query-mutable",isDocsHomePage:!1,title:"Range Sum Query - Mutable",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/segment-tree/range-sum-query-mutable.md",slug:"/binary-tree/segment-tree/range-sum-query-mutable",permalink:"/binary-tree/segment-tree/range-sum-query-mutable",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/segment-tree/range-sum-query-mutable.md",version:"current",sidebar:"someSidebar",previous:{title:"Serialize and Deserialize Binary Tree",permalink:"/binary-tree/recursion/serialize-and-deserialize-binary-tree"},next:{title:"Insertion Sort List",permalink:"/sorting/insertion-sort/insertion-sort-list"}},l=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u89e3\u6cd5 1 \u7ebf\u6bb5\u6811",id:"\u89e3\u6cd5-1-\u7ebf\u6bb5\u6811",children:[]},{value:"\u89e3\u6cd5 2 \u6811\u72b6\u6570\u7ec4",id:"\u89e3\u6cd5-2-\u6811\u72b6\u6570\u7ec4",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],m={rightToc:l};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},m,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(a.b)("p",null,"Given an integer array ",Object(a.b)("inlineCode",{parentName:"p"},"nums"),", find the sum of the elements between indices ",Object(a.b)("inlineCode",{parentName:"p"},"i")," and ",Object(a.b)("inlineCode",{parentName:"p"},"j")," (",Object(a.b)("inlineCode",{parentName:"p"},"i \u2264 j"),"), inclusive."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"update(i, val)")," function modifies ",Object(a.b)("inlineCode",{parentName:"p"},"nums")," by updating the element at index ",Object(a.b)("inlineCode",{parentName:"p"},"i")," to ",Object(a.b)("inlineCode",{parentName:"p"},"val"),"."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example"),":"),Object(a.b)("p",null,"Given ",Object(a.b)("inlineCode",{parentName:"p"},"nums = [1, 3, 5]")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"sumRange(0, 2) -> 9\nupdate(1, 2)\nsumRange(0, 2) -> 8\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note"),":"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"The array is only modifiable by the update function."),Object(a.b)("li",{parentName:"ol"},"You may assume the number of calls to update and sumRange function is distributed evenly.")),Object(a.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(a.b)("p",null,"\u7531\u4e8e\u9700\u8981\u6c42\u4efb\u610f\u6bb5\u7684\u548c\uff0c\u4e14\u4f1a\u968f\u673a\u4fee\u6539\u5143\u7d20\uff0c\u7528\u7ebf\u6bb5\u6811(Segment Tree)\u518d\u5408\u9002\u4e0d\u8fc7\u4e86\u3002"),Object(a.b)("p",null,"\u53e6\u5916\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u6811\u72b6\u6570\u7ec4(Binary Indexed Tree)\uff0c\u4e5f\u9002\u5408\u89e3\u8fd9\u9053\u9898\u3002"),Object(a.b)("h3",{id:"\u89e3\u6cd5-1-\u7ebf\u6bb5\u6811"},"\u89e3\u6cd5 1 \u7ebf\u6bb5\u6811"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Range Sum Query - Mutable\n// Segment Tree\npublic class NumArray {\n    private SegmentTreeNode root;\n\n    // Time Complexity: O(n)\n    public NumArray(int[] nums) {\n        this.root = buildTree(nums, 0, nums.length);\n    }\n\n    // Time Complexity: O(log n)\n    void update(int i, int val) {\n        updateHelper(this.root, i, val);\n    }\n\n    // Time Complexity: O(log n)\n    public int sumRange(int i, int j) {\n        return sumRangeHelper(this.root, i, j+1);\n    }\n\n    private static SegmentTreeNode buildTree(int[] nums, int begin, int end) {\n        if (nums == null || nums.length == 0 || begin >= end)\n            return null;\n        if (begin == end - 1) // one element\n            return new SegmentTreeNode(begin, end, nums[begin]);\n\n        final SegmentTreeNode root = new SegmentTreeNode(begin, end);\n        final int middle = begin + (end - begin) / 2;\n        root.left = buildTree(nums, begin, middle);\n        root.right = buildTree(nums, middle, end);\n        root.sum = root.left.sum + root.right.sum;\n\n        return root;\n    }\n\n    private static void updateHelper(SegmentTreeNode root, int i, int val) {\n        if (root.begin == root.end - 1 && root.begin == i) {\n            root.sum = val;\n            return;\n        }\n\n        final int middle = root.begin + (root.end - root.begin) / 2;\n        if (i < middle) {\n            updateHelper(root.left, i, val);\n        } else {\n            updateHelper(root.right, i, val);\n        }\n\n        root.sum = root.left.sum + root.right.sum;\n    }\n    private static int sumRangeHelper(SegmentTreeNode root, int begin, int end) {\n        if (root == null || begin >=root.end || end <= root.begin)\n            return 0;\n        if (begin <= root.begin && end >= root.end)\n            return root.sum;\n\n        final int middle = root.begin + (root.end - root.begin) / 2;\n        return sumRangeHelper(root.left, begin, Math.min(end, middle)) +\n                sumRangeHelper(root.right, Math.max(middle, begin), end);\n    }\n\n    static class SegmentTreeNode {\n        private int begin;\n        private int end;\n        private int sum;\n        private SegmentTreeNode left;\n        private SegmentTreeNode right;\n\n        public SegmentTreeNode(int begin, int end, int sum) {\n            this.begin = begin;\n            this.end = end;\n            this.sum = sum;\n        }\n        public SegmentTreeNode(int begin, int end) {\n            this(begin, end, 0);\n        }\n    }\n}\n")),Object(a.b)("h3",{id:"\u89e3\u6cd5-2-\u6811\u72b6\u6570\u7ec4"},"\u89e3\u6cd5 2 \u6811\u72b6\u6570\u7ec4"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Range Sum Query - Mutable\n// Binary Indexed Tree\npublic class NumArray {\n    private int[] nums;\n    private int[] bit;\n\n    // Time Complexity: O(n)\n    public NumArray(int[] nums) {\n        // index 0 is unused\n        this.nums = new int[nums.length + 1];\n        this.bit = new int[nums.length + 1];\n\n        for (int i = 0; i < nums.length; ++i) {\n            update(i, nums[i]);\n        }\n    }\n\n    // Time Complexity: O(log n)\n    public void update(int index, int val) {\n        final int diff = val - nums[index + 1];\n        for (int i = index + 1; i < nums.length; i += lowbit(i)) {\n            bit[i] += diff;\n        }\n        nums[index + 1] = val;\n    }\n\n    // Time Complexity: O(log n)\n    public int sumRange(int i, int j) {\n        return read(j + 1) - read(i);\n    }\n\n    private int read(int index) {\n        int result = 0;\n        for (int i = index; i > 0; i -= lowbit(i)) {\n            result += bit[i];\n        }\n        return result;\n    }\n\n    private static int lowbit(int x) {\n        return x & (-x);  // must use parentheses\n    }\n}\n")),Object(a.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/dp/range-sum-query-immutable"}),"Range Sum Query - Immutable")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/dp/range-sum-query-2d-immutable"}),"Range Sum Query 2D - Immutable"))))}b.isMDXComponent=!0},315:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return p}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=i.a.createContext({}),b=function(e){var n=i.a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},s=function(e){var n=b(e.components);return i.a.createElement(m.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},c=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=b(t),c=r,p=s["".concat(o,".").concat(c)]||s[c]||d[c]||a;return t?i.a.createElement(p,u(u({ref:n},m),{},{components:t})):i.a.createElement(p,u({ref:n},m))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=c;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var m=2;m<a;m++)o[m]=t[m];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);