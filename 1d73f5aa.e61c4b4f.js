(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{101:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return d}));var r=t(2),s=t(7),i=(t(0),t(337)),a=t(341),o=t(342),l={title:"Restore IP Addresses"},u={unversionedId:"dfs/restore-ip-addresses",id:"dfs/restore-ip-addresses",isDocsHomePage:!1,title:"Restore IP Addresses",description:"\u63cf\u8ff0",source:"@site/docs/dfs/restore-ip-addresses.md",slug:"/dfs/restore-ip-addresses",permalink:"/dfs/restore-ip-addresses",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/dfs/restore-ip-addresses.md",version:"current",sidebar:"someSidebar",previous:{title:"N-Queens II",permalink:"/dfs/n-queens-ii"},next:{title:"Combination Sum",permalink:"/dfs/combination-sum"}},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]}],p={rightToc:c};function d(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Given a string containing only digits, restore it by returning all possible valid IP address combinations."),Object(i.b)("p",null,"For example:\nGiven ",Object(i.b)("inlineCode",{parentName:"p"},'"25525511135"'),","),Object(i.b)("p",null,"return ",Object(i.b)("inlineCode",{parentName:"p"},'["255.255.11.135", "255.255.111.35"]'),". (Order does not matter)"),Object(i.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(i.b)("p",null,"\u672c\u8d28\u4e0a\u662f\u8981\u5c06\u4e09\u4e2a\u70b9",Object(i.b)("inlineCode",{parentName:"p"},"."),"\u63d2\u5165\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u6709 3 \u4e2a\u53ef\u80fd\u7684\u4f4d\u7f6e\uff0c\u6700\u591a\u4f1a\u6709 27 \u4e2a\u6709\u6548\u7684 IP \u5730\u5740\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u5927\u662f O(1)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(1)\u3002"),Object(i.b)("p",null,"\u53ef\u4ee5\u7528\u4e09\u5c42\u5faa\u73af\u66b4\u529b\u6c42\u89e3\uff0c\u53ef\u4ee5\u7528\u6df1\u641c\u3002"),Object(i.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(i.b)("h4",{id:"\u66b4\u529b\u6cd5"},"\u66b4\u529b\u6cd5"),Object(i.b)(a.a,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"python",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'# Restore IP Addresses\n# \u65f6\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        result = []\n        n = len(s)\n        for i in range(1, min(4, n-2)):\n            for j in range(i+1, min(i+4, n-1)):\n                for k in range(j+1, min(j+4, n)):\n                    s1, s2, s3, s4 = s[0 : i], s[i : j], s[j : k], s[k : n]\n                    if self.isValid(s1) and self.isValid(s2) and self.isValid(s3) and self.isValid(s4):\n                        result.append(s1 + "." + s2 + "." + s3 + "." + s4)\n        return result\n\n    @staticmethod\n    def isValid(s: str)->bool:\n        if len(s) > 3 or len(s) == 0 or (s[0] == \'0\' and len(s) > 1) or int(s) > 255:\n            return False\n        return True\n'))),Object(i.b)(o.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'// Restore IP Addresses\n// \u65f6\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<String> restoreIpAddresses(String s) {\n        List<String> result = new ArrayList<String>();\n        int n = s.length();\n        for(int i = 1; i < 4 && i < n-2; i++){\n            for(int j = i+1; j < i+4 && j < n-1; j++){\n                for(int k = j+1; k < j+4 && k < n; k++){\n                    String s1 = s.substring(0, i), s2 = s.substring(i, j), s3 = s.substring(j, k), s4 = s.substring(k, n);\n                    if(isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)){\n                        result.add(s1 + "." + s2 + "." + s3 + "." + s4);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    private boolean isValid(String s){\n        if(s.length() > 3 || s.length() == 0 || (s.charAt(0) == \'0\' && s.length() > 1) || Integer.parseInt(s) > 255)\n            return false;\n        return true;\n    }\n}\n'))),Object(i.b)(o.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),'// Restore IP Addresses\n// \u65f6\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<string> restoreIpAddresses(string s) {\n        vector<string> result;\n        int n = s.length();\n        for(int i = 1; i < 4 && i < n-2; i++){\n            for(int j = i+1; j < i+4 && j < n-1; j++){\n                for(int k = j+1; k < j+4 && k < n; k++){\n                    string s1 = s.substr(0, i), s2 = s.substr(i, j-i), s3 = s.substr(j, k-j), s4 = s.substr(k, n-k);\n                    if(isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)){\n                        result.push_back(s1 + "." + s2 + "." + s3 + "." + s4);\n                    }\n                }\n            }\n        }\n        return result;\n    }\nprivate:\n    bool isValid(const string& s) {\n        if(s.length() > 3 || s.length() == 0 || (s[0] == \'0\' && s.length() > 1) || std::stoi(s) > 255)\n            return false;\n        return true;\n    }\n};\n')))),Object(i.b)("h4",{id:"dfs"},"DFS"),Object(i.b)(a.a,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"python",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"# Restore IP Addresses\n# \u65f6\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        result = []\n        ip = [] # \u5b58\u653e\u4e2d\u95f4\u7ed3\u679c\n        self.dfs(s, ip, result, 0)\n        return result\n\n    def dfs(self, s: str, ip: List[str], result: List[str], start: int):\n        '''DFS.\n          Args::\n            s: The original string\n            ip: Interim result\n            result: List of valid IP addresses\n            start: Current position\n        '''\n        if len(ip) == 4 and start == len(s): # \u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u89e3\n            result.append(ip[0] + '.' + ip[1] + '.' + ip[2] + '.' + ip[3])\n            return\n\n        if len(s) - start > (4 - len(ip)) * 3: return  # \u526a\u679d\n        if len(s) - start < (4 - len(ip)): return  # \u526a\u679d\n\n        for i in range(1, 4):\n        #for (int i = start; i < start + 3 && i < s.length(); i++) {\n            if start + i > len(s): continue\n            num = int(s[start: start+i])\n\n            if num < 0 or num > 255: continue  # \u526a\u679d\n\n            ip.append(s[start: start+i])\n            self.dfs(s, ip, result, start+i)\n            ip.pop()\n\n            if num == 0: break  # \u4e0d\u5141\u8bb8\u524d\u7f000\uff0c\u4f46\u5141\u8bb8\u5355\u4e2a0\n"))),Object(i.b)(o.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Restore IP Addresses\n// \u65f6\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<String> restoreIpAddresses(String s) {\n        List<String> result = new ArrayList<>();\n        List<String> ip = new ArrayList<>();; // \u5b58\u653e\u4e2d\u95f4\u7ed3\u679c\n        dfs(s, ip, result, 0);\n        return result;\n    }\n\n    /**\n     * \u89e3\u6790\u5b57\u7b26\u4e32\n     * @param[in] s \u5b57\u7b26\u4e32\uff0c\u8f93\u5165\u6570\u636e\n     * @param[out] ip \u5b58\u653e\u4e2d\u95f4\u7ed3\u679c\n     * @param[out] result \u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684IP\u5730\u5740\n     * @param[in] start \u5f53\u524d\u4f4d\u7f6e\n     * @return \u65e0\n     */\n    private static void dfs(String s, List<String> ip,\n                            List<String> result, int start) {\n        if (ip.size() == 4 && start == s.length()) {  // \u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u89e3\n            result.add(ip.get(0) + '.' + ip.get(1) + '.' +\n                    ip.get(2) + '.' + ip.get(3));\n            return;\n        }\n\n        if (s.length() - start > (4 - ip.size()) * 3) return;  // \u526a\u679d\n        if (s.length() - start < (4 - ip.size())) return;  // \u526a\u679d\n\n        int num = 0;\n        for (int i = start; i < start + 3 && i < s.length(); i++) {\n            num = num * 10 + (s.charAt(i) - '0');\n\n            if (num < 0 || num > 255) continue;  // \u526a\u679d\n\n            ip.add(s.substring(start, i + 1));\n            dfs(s, ip, result, i + 1);\n            ip.remove(ip.size() - 1);\n\n            if (num == 0) break;  // \u4e0d\u5141\u8bb8\u524d\u7f000\uff0c\u4f46\u5141\u8bb8\u5355\u4e2a0\n        }\n    }\n}\n"))),Object(i.b)(o.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"// Restore IP Addresses\n// \u65f6\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<string> restoreIpAddresses(const string& s) {\n        vector<string> result;\n        vector<string> ip; // \u5b58\u653e\u4e2d\u95f4\u7ed3\u679c\n        dfs(s, ip, result, 0);\n        return result;\n    }\n\n    /**\n     * @brief \u89e3\u6790\u5b57\u7b26\u4e32\n     * @param[in] s \u5b57\u7b26\u4e32\uff0c\u8f93\u5165\u6570\u636e\n     * @param[out] ip \u5b58\u653e\u4e2d\u95f4\u7ed3\u679c\n     * @param[out] result \u5b58\u653e\u6240\u6709\u53ef\u80fd\u7684IP\u5730\u5740\n     * @param[in] start \u5f53\u524d\u4f4d\u7f6e\n     * @return \u65e0\n     */\n    void dfs(string s, vector<string>& ip, vector<string> &result,\n            size_t start) {\n        if (ip.size() == 4 && start == s.size()) {  // \u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u89e3\n            result.push_back(ip[0] + '.' + ip[1] + '.' + ip[2] + '.' + ip[3]);\n            return;\n        }\n\n        if (s.size() - start > (4 - ip.size()) * 3) return;  // \u526a\u679d\n        if (s.size() - start < (4 - ip.size())) return;  // \u526a\u679d\n\n        int num = 0;\n        for (size_t i = start; i < start + 3 && i < s.size(); i++) {\n            num = num * 10 + (s[i] - '0');\n\n            if (num < 0 || num > 255) continue;  // \u526a\u679d\n\n            ip.push_back(s.substr(start, i - start + 1));\n            dfs(s, ip, result, i + 1);\n            ip.pop_back();\n\n            if (num == 0) break;  // \u4e0d\u5141\u8bb8\u524d\u7f000\uff0c\u4f46\u5141\u8bb8\u5355\u4e2a0\n        }\n    }\n};\n")))))}d.isMDXComponent=!0},337:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var r=t(0),s=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var u=s.a.createContext({}),c=function(e){var n=s.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return s.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},b=s.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),b=r,f=p["".concat(a,".").concat(b)]||p[b]||d[b]||i;return t?s.a.createElement(f,o(o({ref:n},u),{},{components:t})):s.a.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=b;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var u=2;u<i;u++)a[u]=t[u];return s.a.createElement.apply(null,a)}return s.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},338:function(e,n,t){"use strict";function r(e){var n,t,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(s&&(s+=" "),s+=t);else for(n in e)e[n]&&(s&&(s+=" "),s+=n);return s}n.a=function(){for(var e,n,t=0,s="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(s&&(s+=" "),s+=n);return s}},339:function(e,n,t){"use strict";var r=t(0),s=t(340);n.a=function(){var e=Object(r.useContext)(s.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},340:function(e,n,t){"use strict";var r=t(0),s=Object(r.createContext)(void 0);n.a=s},341:function(e,n,t){"use strict";var r=t(0),s=t.n(r),i=t(339),a=t(338),o=t(49),l=t.n(o),u=37,c=39;n.a=function(e){var n=e.block,t=e.children,o=e.defaultValue,p=e.values,d=e.groupId,b=e.className,f=Object(i.a)(),m=f.tabGroupChoices,g=f.setTabGroupChoices,v=Object(r.useState)(o),j=v[0],O=v[1],y=Object(r.useState)(!1),h=y[0],w=y[1];if(null!=d){var k=m[d];null!=k&&k!==j&&p.some((function(e){return e.value===k}))&&O(k)}var I=function(e){O(e),null!=d&&g(d,e)},P=[],S=function(e){e.metaKey||e.altKey||e.ctrlKey||w(!0)},T=function(){w(!1)};return Object(r.useEffect)((function(){return window.addEventListener("keydown",S),window.addEventListener("mousedown",T),function(){window.removeEventListener("keydown",S),window.removeEventListener("mousedown",T)}}),[]),s.a.createElement("div",null,s.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(a.a)("tabs",{"tabs--block":n},b)},p.map((function(e){var n=e.value,t=e.label;return s.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===n,className:Object(a.a)("tabs__item",l.a.tabItem,{"tabs__item--active":j===n}),style:h?{}:{outline:"none"},key:n,ref:function(e){return P.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case c:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case u:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(P,e.target,e),S(e)},onFocus:function(){return I(n)},onClick:function(){I(n),w(!1)},onPointerDown:function(){return w(!1)}},t)}))),s.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(t).filter((function(e){return e.props.value===j}))[0]))}},342:function(e,n,t){"use strict";var r=t(0),s=t.n(r);n.a=function(e){return s.a.createElement("div",null,e.children)}}}]);