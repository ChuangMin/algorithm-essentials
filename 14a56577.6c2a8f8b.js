(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{298:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),d=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),p=r,f=u["".concat(i,".").concat(p)]||u[p]||b[p]||o;return n?a.a.createElement(f,l(l({ref:t},c),{},{components:n})):a.a.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},299:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},300:function(e,t,n){"use strict";var r=n(0),a=Object(r.createContext)(void 0);t.a=a},301:function(e,t,n){"use strict";var r=n(0),a=n(300);t.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},302:function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=n(301),i=n(299),l=n(47),s=n.n(l),c=37,d=39;t.a=function(e){var t=e.block,n=e.children,l=e.defaultValue,u=e.values,b=e.groupId,p=Object(o.a)(),f=p.tabGroupChoices,v=p.setTabGroupChoices,h=Object(r.useState)(l),m=h[0],y=h[1],T=Object(r.useState)(!1),O=T[0],j=T[1];if(null!=b){var w=f[b];null!=w&&w!==m&&u.some((function(e){return e.value===w}))&&y(w)}var g=function(e){y(e),null!=b&&v(b,e)},N=[],S=function(e){e.metaKey||e.altKey||e.ctrlKey||j(!0)},L=function(){j(!1)};return Object(r.useEffect)((function(){window.addEventListener("keydown",S),window.addEventListener("mousedown",L)}),[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":t})},u.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":m===t,className:Object(i.a)("tabs__item",s.a.tabItem,{"tabs__item--active":m===t}),style:O?{}:{outline:"none"},key:t,ref:function(e){return N.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case d:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case c:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(N,e.target,e),S(e)},onFocus:function(){return g(t)},onClick:function(){g(t),j(!1)},onPointerDown:function(){return j(!1)}},n)}))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter((function(e){return e.props.value===m}))[0]))}},303:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function(e){return a.a.createElement("div",null,e.children)}},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return b}));var r=n(2),a=n(6),o=(n(0),n(298)),i=n(302),l=n(303),s={title:"Convert Sorted List to Binary Search Tree"},c={unversionedId:"binary-tree/bst/convert-sorted-list-to-binary-search-tree",id:"binary-tree/bst/convert-sorted-list-to-binary-search-tree",isDocsHomePage:!1,title:"Convert Sorted List to Binary Search Tree",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/bst/convert-sorted-list-to-binary-search-tree.md",slug:"/binary-tree/bst/convert-sorted-list-to-binary-search-tree",permalink:"/algorithm-essentials/binary-tree/bst/convert-sorted-list-to-binary-search-tree",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/bst/convert-sorted-list-to-binary-search-tree.md",version:"current",sidebar:"someSidebar",previous:{title:"Convert Sorted Array to Binary Search Tree",permalink:"/algorithm-essentials/binary-tree/bst/convert-sorted-array-to-binary-search-tree"},next:{title:"LCA of BST",permalink:"/algorithm-essentials/binary-tree/bst/lca-of-bst"}},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b",id:"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b",children:[]},{value:"\u81ea\u5e95\u5411\u4e0a",id:"\u81ea\u5e95\u5411\u4e0a",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],u={rightToc:d};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(o.b)("p",null,"Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST."),Object(o.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(o.b)("p",null,"\u8fd9\u9898\u4e0e\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u4f46\u662f\u5355\u94fe\u8868\u4e0d\u80fd\u968f\u673a\u8bbf\u95ee\uff0c\u800c\u81ea\u9876\u5411\u4e0b\u7684\u4e8c\u5206\u6cd5\u5fc5\u987b\u9700\u8981 RandomAccessIterator\uff0c\u56e0\u6b64\u524d\u9762\u7684\u65b9\u6cd5\u4e0d\u9002\u7528\u672c\u9898\u3002"),Object(o.b)("p",null,"\u5b58\u5728\u4e00\u79cd\u81ea\u5e95\u5411\u4e0a(bottom-up)\u7684\u65b9\u6cd5\uff0c\u89c1 ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"http://leetcode.com/2010/11/convert-sorted-list-to-balanced-binary.html"}),"http://leetcode.com/2010/11/convert-sorted-list-to-balanced-binary.html")),Object(o.b)("h3",{id:"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b"},"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b"),Object(o.b)("p",null,"\u5206\u6cbb\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\u81ea\u9876\u5411\u4e0b\uff0c\u590d\u6742\u5ea6 ",Object(o.b)("inlineCode",{parentName:"p"},"O(nlogn)"),"\u3002"),Object(o.b)(i.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"java",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Convert Sorted List to Binary Search Tree\n// \u4e8c\u5206\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\n// \u81ea\u9876\u5411\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\n    public TreeNode sortedListToBST (ListNode head) {\n        if(head == null) return null;\n        if(head.next == null) return new TreeNode(head.val);\n\n        ListNode mid = cutAtMiddle(head);\n\n        TreeNode root = new TreeNode(mid.val);\n        root.left = sortedListToBST(head);\n        root.right = sortedListToBST(mid.next);\n\n        return root;\n    }\n\n    ListNode cutAtMiddle(ListNode head) {\n        if(head == null) return null;\n\n        ListNode fast = head;\n        ListNode slow = head;\n        ListNode prev_slow = head;\n\n        while(fast != null && fast.next != null){\n            prev_slow = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        prev_slow.next = null;\n        return slow;\n    }\n}\n"))),Object(o.b)(l.a,{value:"cpp",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"// Convert Sorted List to Binary Search Tree\n// \u4e8c\u5206\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\n// \u81ea\u9876\u5411\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    TreeNode* sortedListToBST (ListNode* head) {\n        if(head == nullptr) return nullptr;\n        if(head->next == nullptr) return new TreeNode(head->val);\n\n        ListNode *mid = cutAtMiddle(head);\n\n        TreeNode *root = new TreeNode(mid->val);\n        root->left = sortedListToBST(head);\n        root->right = sortedListToBST(mid->next);\n\n        return root;\n    }\n\n    ListNode* cutAtMiddle(ListNode *head) {\n        if(head == nullptr) return nullptr;\n\n        ListNode *fast = head;\n        ListNode *slow = head;\n        ListNode *prev_slow = head;\n\n        while(fast != nullptr && fast->next != nullptr){\n            prev_slow = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        prev_slow->next = nullptr;\n        return slow;\n    }\n};\n")))),Object(o.b)("h3",{id:"\u81ea\u5e95\u5411\u4e0a"},"\u81ea\u5e95\u5411\u4e0a"),Object(o.b)(i.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"java",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Convert Sorted List to Binary Search Tree\n// bottom-up\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\npublic class Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        int len = 0;\n        ListNode p = head;\n        while (p != null) {\n            len++;\n            p = p.next;\n        }\n        return sortedListToBST(new Container(head), 0, len - 1);\n    }\n    private static TreeNode sortedListToBST(Container list, int start, int end) {\n        if (start > end) return null;\n\n        int mid = start + (end - start) / 2;\n        TreeNode leftChild = sortedListToBST(list, start, mid - 1);\n        TreeNode parent = new TreeNode(list.p.val);\n        parent.left = leftChild;\n        list.p = list.p.next;\n        parent.right = sortedListToBST(list, mid + 1, end);\n        return parent;\n    }\n    // \u6a21\u62df\u4e8c\u7ea7\u6307\u9488\n    static class Container {\n        ListNode p;\n        public Container(ListNode p) {\n            this.p = p;\n        }\n    }\n}\n"))),Object(o.b)(l.a,{value:"cpp",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"// Convert Sorted List to Binary Search Tree\n// bottom-up\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    TreeNode *sortedListToBST(ListNode *head) {\n        int len = 0;\n        ListNode *p = head;\n        while (p) {\n            len++;\n            p = p->next;\n        }\n        return sortedListToBST(head, 0, len - 1);\n    }\nprivate:\n    TreeNode* sortedListToBST(ListNode*& list, int start, int end) {\n        if (start > end) return nullptr;\n\n        int mid = start + (end - start) / 2;\n        TreeNode *leftChild = sortedListToBST(list, start, mid - 1);\n        TreeNode *parent = new TreeNode(list->val);\n        parent->left = leftChild;\n        list = list->next;\n        parent->right = sortedListToBST(list, mid + 1, end);\n        return parent;\n    }\n};\n")))),Object(o.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/algorithm-essentials/binary-tree/bst/convert-sorted-array-to-binary-search-tree"}),"Convert Sorted Array to Binary Search Tree"))))}b.isMDXComponent=!0}}]);