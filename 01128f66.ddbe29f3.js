(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{298:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=o.a.createContext({}),s=function(e){var t=o.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=s(n),d=r,f=b["".concat(a,".").concat(d)]||b[d]||p[d]||i;return n?o.a.createElement(f,c(c({ref:t},u),{},{components:n})):o.a.createElement(f,c({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var u=2;u<i;u++)a[u]=n[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},299:function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},300:function(e,t,n){"use strict";var r=n(0),o=Object(r.createContext)(void 0);t.a=o},301:function(e,t,n){"use strict";var r=n(0),o=n(300);t.a=function(){var e=Object(r.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},302:function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(301),a=n(299),c=n(47),l=n.n(c),u=37,s=39;t.a=function(e){var t=e.block,n=e.children,c=e.defaultValue,b=e.values,p=e.groupId,d=Object(i.a)(),f=d.tabGroupChoices,m=d.setTabGroupChoices,h=Object(r.useState)(c),g=h[0],O=h[1],v=Object(r.useState)(!1),y=v[0],j=v[1];if(null!=p){var N=f[p];null!=N&&N!==g&&b.some((function(e){return e.value===N}))&&O(N)}var x=function(e){O(e),null!=p&&m(p,e)},w=[],L=function(e){e.metaKey||e.altKey||e.ctrlKey||j(!0)},P=function(){j(!1)};return Object(r.useEffect)((function(){window.addEventListener("keydown",L),window.addEventListener("mousedown",P)}),[]),o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(a.a)("tabs",{"tabs--block":t})},b.map((function(e){var t=e.value,n=e.label;return o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===t,className:Object(a.a)("tabs__item",l.a.tabItem,{"tabs__item--active":g===t}),style:y?{}:{outline:"none"},key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case s:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case u:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e),L(e)},onFocus:function(){return x(t)},onClick:function(){x(t),j(!1)},onPointerDown:function(){return j(!1)}},n)}))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter((function(e){return e.props.value===g}))[0]))}},303:function(e,t,n){"use strict";var r=n(0),o=n.n(r);t.a=function(e){return o.a.createElement("div",null,e.children)}},57:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(2),o=n(6),i=(n(0),n(298)),a=n(302),c=n(303),l={title:"Populating Next Right Pointers in Each Node"},u={unversionedId:"binary-tree/recursion/populating-next-right-pointers-in-each-node",id:"binary-tree/recursion/populating-next-right-pointers-in-each-node",isDocsHomePage:!1,title:"Populating Next Right Pointers in Each Node",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/recursion/populating-next-right-pointers-in-each-node.md",slug:"/binary-tree/recursion/populating-next-right-pointers-in-each-node",permalink:"/algorithm-essentials/binary-tree/recursion/populating-next-right-pointers-in-each-node",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/recursion/populating-next-right-pointers-in-each-node.md",version:"current",sidebar:"someSidebar",previous:{title:"Binary Tree Maximum Path Sum",permalink:"/algorithm-essentials/binary-tree/recursion/binary-tree-maximum-path-sum"},next:{title:"Sum Root to Leaf Numbers",permalink:"/algorithm-essentials/binary-tree/recursion/sum-root-to-leaf-numbers"}},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",children:[]}],b={rightToc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(i.b)("p",null,"Given a binary tree"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"struct TreeLinkNode {\n   int val;\n   TreeLinkNode *left, *right, *next;\n   TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n};\n")),Object(i.b)("p",null,"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ",Object(i.b)("inlineCode",{parentName:"p"},"NULL"),"."),Object(i.b)("p",null,"Initially, all next pointers are set to ",Object(i.b)("inlineCode",{parentName:"p"},"NULL"),"."),Object(i.b)("p",null,"Note:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"You may only use constant extra space."),Object(i.b)("li",{parentName:"ul"},"You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).")),Object(i.b)("p",null,"For example,"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"         1\n       /  \\\n      2    3\n     / \\  / \\\n    4  5  6  7\n")),Object(i.b)("p",null,"After calling your function, the tree should look like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"         1 -> NULL\n       /  \\\n      2 -> 3 -> NULL\n     / \\  / \\\n    4->5->6->7 -> NULL\n")),Object(i.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(i.b)("p",null,"\u65e0"),Object(i.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(i.b)(a.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"java",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Populating Next Right Pointers in Each Node\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\npublic class Solution {\n    public void connect(TreeLinkNode root) {\n        connect(root, null);\n    }\n    private static void connect(TreeLinkNode root, TreeLinkNode sibling) {\n        if (root == null) return;\n        else root.next = sibling;\n\n        connect(root.left, root.right);\n        if (sibling != null) connect(root.right, sibling.left);\n        else connect(root.right, null);\n    }\n}\n"))),Object(i.b)(c.a,{value:"cpp",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"// Populating Next Right Pointers in Each Node\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        connect(root, NULL);\n    }\nprivate:\n    void connect(TreeLinkNode *root, TreeLinkNode *sibling) {\n        if (root == nullptr)\n            return;\n        else\n            root->next = sibling;\n\n        connect(root->left, root->right);\n        if (sibling)\n            connect(root->right, sibling->left);\n        else\n            connect(root->right, nullptr);\n    }\n};\n")))),Object(i.b)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/algorithm-essentials/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii"}),"Populating Next Right Pointers in Each Node II"))))}p.isMDXComponent=!0}}]);