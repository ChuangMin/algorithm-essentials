(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{298:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=i.a.createContext({}),s=function(e){var t=i.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},f=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),f=r,b=d["".concat(o,".").concat(f)]||d[f]||p[f]||a;return n?i.a.createElement(b,l(l({ref:t},u),{},{components:n})):i.a.createElement(b,l({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},299:function(e,t,n){"use strict";function r(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(i&&(i+=" "),i+=t);return i}},300:function(e,t,n){"use strict";var r=n(0),i=Object(r.createContext)(void 0);t.a=i},301:function(e,t,n){"use strict";var r=n(0),i=n(300);t.a=function(){var e=Object(r.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},302:function(e,t,n){"use strict";var r=n(0),i=n.n(r),a=n(301),o=n(299),l=n(47),c=n.n(l),u=37,s=39;t.a=function(e){var t=e.block,n=e.children,l=e.defaultValue,d=e.values,p=e.groupId,f=Object(a.a)(),b=f.tabGroupChoices,m=f.setTabGroupChoices,v=Object(r.useState)(l),y=v[0],O=v[1],h=Object(r.useState)(!1),j=h[0],g=h[1];if(null!=p){var x=b[p];null!=x&&x!==y&&d.some((function(e){return e.value===x}))&&O(x)}var w=function(e){O(e),null!=p&&m(p,e)},_=[],N=function(e){e.metaKey||e.altKey||e.ctrlKey||g(!0)},k=function(){g(!1)};return Object(r.useEffect)((function(){window.addEventListener("keydown",N),window.addEventListener("mousedown",k)}),[]),i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t})},d.map((function(e){var t=e.value,n=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":y===t,className:Object(o.a)("tabs__item",c.a.tabItem,{"tabs__item--active":y===t}),style:j?{}:{outline:"none"},key:t,ref:function(e){return _.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case s:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case u:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(_,e.target,e),N(e)},onFocus:function(){return w(t)},onClick:function(){w(t),g(!1)},onPointerDown:function(){return g(!1)}},n)}))),i.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter((function(e){return e.props.value===y}))[0]))}},303:function(e,t,n){"use strict";var r=n(0),i=n.n(r);t.a=function(e){return i.a.createElement("div",null,e.children)}},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(2),i=n(6),a=(n(0),n(298)),o=n(302),l=n(303),c={title:"Partition List"},u={unversionedId:"linear-list/linked-list/partition-list",id:"linear-list/linked-list/partition-list",isDocsHomePage:!1,title:"Partition List",description:"\u63cf\u8ff0",source:"@site/docs/linear-list/linked-list/partition-list.md",slug:"/linear-list/linked-list/partition-list",permalink:"/linear-list/linked-list/partition-list",editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/linear-list/linked-list/partition-list.md",version:"current",sidebar:"someSidebar",previous:{title:"Reverse Linked List II",permalink:"/linear-list/linked-list/reverse-linked-list-ii"},next:{title:"Remove Duplicates from Sorted List",permalink:"/linear-list/linked-list/remove-duplicates-from-sorted-list"}},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",children:[]},{value:"\u5206\u6790",id:"\u5206\u6790",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]}],d={rightToc:s};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),Object(a.b)("p",null,"Given a linked list and a value ",Object(a.b)("inlineCode",{parentName:"p"},"x"),", partition it such that all nodes less than ",Object(a.b)("inlineCode",{parentName:"p"},"x")," come before nodes greater than or equal to ",Object(a.b)("inlineCode",{parentName:"p"},"x"),"."),Object(a.b)("p",null,"You should preserve the original relative order of the nodes in each of the two partitions."),Object(a.b)("p",null,"For example,\nGiven ",Object(a.b)("inlineCode",{parentName:"p"},"1->4->3->2->5->2")," and ",Object(a.b)("inlineCode",{parentName:"p"},"x = 3"),", return ",Object(a.b)("inlineCode",{parentName:"p"},"1->2->2->4->3->5"),"."),Object(a.b)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),Object(a.b)("p",null,"\u65e0"),Object(a.b)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),Object(a.b)(o.a,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},Object(a.b)(l.a,{value:"java",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"// Partition List\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\n    public ListNode partition(ListNode head, int x) {\n        ListNode left_dummy = new ListNode(-1); // \u5934\u7ed3\u70b9\n        ListNode right_dummy = new ListNode(-1); // \u5934\u7ed3\u70b9\n\n        ListNode left_cur = left_dummy;\n        ListNode right_cur = right_dummy;\n\n        for (ListNode cur = head; cur != null; cur = cur.next) {\n            if (cur.val < x) {\n                left_cur.next = cur;\n                left_cur = cur;\n            } else {\n                right_cur.next = cur;\n                right_cur = cur;\n            }\n        }\n\n        left_cur.next = right_dummy.next;\n        right_cur.next = null;\n\n        return left_dummy.next;\n    }\n};\n"))),Object(a.b)(l.a,{value:"cpp",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"// Partition List\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    ListNode* partition(ListNode* head, int x) {\n        ListNode left_dummy(-1); // \u5934\u7ed3\u70b9\n        ListNode right_dummy(-1); // \u5934\u7ed3\u70b9\n\n        auto left_cur = &left_dummy;\n        auto right_cur = &right_dummy;\n\n        for (ListNode *cur = head; cur != nullptr; cur = cur->next) {\n            if (cur->val < x) {\n                left_cur->next = cur;\n                left_cur = cur;\n            } else {\n                right_cur->next = cur;\n                right_cur = cur;\n            }\n        }\n\n        left_cur->next = right_dummy.next;\n        right_cur->next = nullptr;\n\n        return left_dummy.next;\n    }\n};\n")))))}p.isMDXComponent=!0}}]);